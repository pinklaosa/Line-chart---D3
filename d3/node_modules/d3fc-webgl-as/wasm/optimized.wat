(module
 (type $FUNCSIG$viiii (func (param i32 i32 i32 i32)))
 (type $FUNCSIG$v (func))
 (type $FUNCSIG$viiffi (func (param i32 i32 f32 f32 i32)))
 (type $FUNCSIG$fii (func (param i32 i32) (result f32)))
 (type $FUNCSIG$viif (func (param i32 i32 f32)))
 (type $FUNCSIG$ff (func (param f32) (result f32)))
 (type $FUNCSIG$vifffi (func (param i32 f32 f32 f32 i32)))
 (type $FUNCSIG$iiii (func (param i32 i32 i32) (result i32)))
 (type $FUNCSIG$ii (func (param i32) (result i32)))
 (type $FUNCSIG$vii (func (param i32 i32)))
 (type $FUNCSIG$viii (func (param i32 i32 i32)))
 (type $FUNCSIG$iii (func (param i32 i32) (result i32)))
 (type $FUNCSIG$vi (func (param i32)))
 (import "env" "abort" (func $~lib/env/abort (param i32 i32 i32 i32)))
 (memory $0 1)
 (data (i32.const 8) "\16\00\00\00~\00l\00i\00b\00/\00a\00l\00l\00o\00c\00a\00t\00o\00r\00/\00t\00l\00s\00f\00.\00t\00s")
 (data (i32.const 56) "\1b\00\00\00~\00l\00i\00b\00/\00i\00n\00t\00e\00r\00n\00a\00l\00/\00t\00y\00p\00e\00d\00a\00r\00r\00a\00y\00.\00t\00s")
 (data (i32.const 120) " \00\00\00\00\00\00\00)\15DNn\83\f9\a2\c0\dd4\f5\d1W\'\fcA\90C<\99\95b\dba\c5\bb\de\abcQ\fe")
 (data (i32.const 184) "x\00\00\00\04")
 (table $0 1 funcref)
 (elem (i32.const 0) $start)
 (global $~lib/allocator/tlsf/ROOT (mut i32) (i32.const 0))
 (global $~lib/math/rempio2f_y (mut f64) (f64.const 0))
 (export "memory" (memory $0))
 (export "table" (table $0))
 (export "circles" (func $src/assembly/circles/circles))
 (export "shapes" (func $src/assembly/shapes/shapes))
 (export "edges" (func $src/assembly/edges/edges))
 (export "memory.compare" (func $~lib/memory/memory.compare))
 (export "memory.allocate" (func $~lib/memory/memory.allocate))
 (export "memory.free" (func $~lib/memory/memory.free))
 (export "memory.reset" (func $~lib/memory/memory.reset))
 (func $~lib/internal/typedarray/TypedArray<f32>#__get (; 1 ;) (type $FUNCSIG$fii) (param $0 i32) (param $1 i32) (result f32)
  local.get $1
  local.get $0
  i32.load offset=8
  i32.const 2
  i32.shr_u
  i32.ge_u
  if
   i32.const 0
   i32.const 56
   i32.const 39
   i32.const 63
   call $~lib/env/abort
   unreachable
  end
  local.get $0
  i32.load offset=4
  local.get $0
  i32.load
  local.get $1
  i32.const 2
  i32.shl
  i32.add
  i32.add
  f32.load offset=8
 )
 (func $~lib/internal/typedarray/TypedArray<f32>#__set (; 2 ;) (type $FUNCSIG$viif) (param $0 i32) (param $1 i32) (param $2 f32)
  local.get $1
  local.get $0
  i32.load offset=8
  i32.const 2
  i32.shr_u
  i32.ge_u
  if
   i32.const 0
   i32.const 56
   i32.const 50
   i32.const 63
   call $~lib/env/abort
   unreachable
  end
  local.get $0
  i32.load offset=4
  local.get $0
  i32.load
  local.get $1
  i32.const 2
  i32.shl
  i32.add
  i32.add
  local.get $2
  f32.store offset=8
 )
 (func $~lib/math/NativeMathf.sin (; 3 ;) (type $FUNCSIG$ff) (param $0 f32) (result f32)
  (local $1 f64)
  (local $2 f64)
  (local $3 i32)
  (local $4 i64)
  (local $5 f64)
  (local $6 i32)
  (local $7 i32)
  (local $8 i64)
  (local $9 i32)
  (local $10 i64)
  (local $11 i64)
  local.get $0
  i32.reinterpret_f32
  local.tee $3
  i32.const 31
  i32.shr_u
  local.set $7
  block $folding-inner0
   local.get $3
   i32.const 2147483647
   i32.and
   local.tee $3
   i32.const 1061752794
   i32.le_u
   if
    local.get $3
    i32.const 964689920
    i32.lt_u
    if
     local.get $0
     return
    end
    local.get $0
    f64.promote_f32
    local.tee $1
    local.get $1
    f64.mul
    local.tee $2
    local.get $1
    f64.mul
    local.set $5
    br $folding-inner0
   end
   local.get $3
   i32.const 1081824209
   i32.le_u
   if
    local.get $3
    i32.const 1075235811
    i32.le_u
    if
     local.get $7
     if (result f32)
      local.get $0
      f64.promote_f32
      f64.const 1.5707963267948966
      f64.add
      local.tee $1
      local.get $1
      f64.mul
      local.tee $1
      local.get $1
      f64.mul
      local.set $2
      f64.const 1
      local.get $1
      f64.const -0.499999997251031
      f64.mul
      f64.add
      local.get $2
      f64.const 0.04166662332373906
      f64.mul
      f64.add
      local.get $2
      local.get $1
      f64.mul
      f64.const -0.001388676377460993
      local.get $1
      f64.const 2.439044879627741e-05
      f64.mul
      f64.add
      f64.mul
      f64.add
      f32.demote_f64
      f32.neg
     else      
      local.get $0
      f64.promote_f32
      f64.const 1.5707963267948966
      f64.sub
      local.tee $1
      local.get $1
      f64.mul
      local.tee $1
      local.get $1
      f64.mul
      local.set $2
      f64.const 1
      local.get $1
      f64.const -0.499999997251031
      f64.mul
      f64.add
      local.get $2
      f64.const 0.04166662332373906
      f64.mul
      f64.add
      local.get $2
      local.get $1
      f64.mul
      f64.const -0.001388676377460993
      local.get $1
      f64.const 2.439044879627741e-05
      f64.mul
      f64.add
      f64.mul
      f64.add
      f32.demote_f64
     end
     return
    end
    local.get $0
    f64.promote_f32
    local.tee $1
    f64.const 3.141592653589793
    f64.add
    local.get $1
    f64.const 3.141592653589793
    f64.sub
    local.get $7
    select
    f64.neg
    local.tee $1
    local.get $1
    f64.mul
    local.tee $2
    local.get $1
    f64.mul
    local.set $5
    br $folding-inner0
   end
   local.get $3
   i32.const 1088565717
   i32.le_u
   if
    local.get $3
    i32.const 1085271519
    i32.le_u
    if
     local.get $7
     if (result f32)
      local.get $0
      f64.promote_f32
      f64.const 4.71238898038469
      f64.add
      local.tee $1
      local.get $1
      f64.mul
      local.tee $1
      local.get $1
      f64.mul
      local.set $2
      f64.const 1
      local.get $1
      f64.const -0.499999997251031
      f64.mul
      f64.add
      local.get $2
      f64.const 0.04166662332373906
      f64.mul
      f64.add
      local.get $2
      local.get $1
      f64.mul
      f64.const -0.001388676377460993
      local.get $1
      f64.const 2.439044879627741e-05
      f64.mul
      f64.add
      f64.mul
      f64.add
      f32.demote_f64
     else      
      local.get $0
      f64.promote_f32
      f64.const 4.71238898038469
      f64.sub
      local.tee $1
      local.get $1
      f64.mul
      local.tee $1
      local.get $1
      f64.mul
      local.set $2
      f64.const 1
      local.get $1
      f64.const -0.499999997251031
      f64.mul
      f64.add
      local.get $2
      f64.const 0.04166662332373906
      f64.mul
      f64.add
      local.get $2
      local.get $1
      f64.mul
      f64.const -0.001388676377460993
      local.get $1
      f64.const 2.439044879627741e-05
      f64.mul
      f64.add
      f64.mul
      f64.add
      f32.demote_f64
      f32.neg
     end
     return
    end
    local.get $0
    f64.promote_f32
    local.tee $1
    f64.const 6.283185307179586
    f64.add
    local.get $1
    f64.const 6.283185307179586
    f64.sub
    local.get $7
    select
    local.tee $2
    local.get $2
    f64.mul
    local.tee $1
    local.get $2
    f64.mul
    local.set $5
    local.get $2
    local.get $5
    f64.const -0.16666666641626524
    local.get $1
    f64.const 0.008333329385889463
    f64.mul
    f64.add
    f64.mul
    f64.add
    local.get $5
    local.get $1
    local.get $1
    f64.mul
    f64.mul
    f64.const -1.9839334836096632e-04
    local.get $1
    f64.const 2.718311493989822e-06
    f64.mul
    f64.add
    f64.mul
    f64.add
    f32.demote_f64
    return
   end
   local.get $3
   i32.const 2139095040
   i32.ge_u
   if
    local.get $0
    local.get $0
    f32.sub
    return
   end
   block $~lib/math/rempio2f|inlined.0 (result i32)
    local.get $3
    i32.const 1305022427
    i32.lt_u
    if
     local.get $0
     f64.promote_f32
     local.tee $2
     f64.const 0.6366197723675814
     f64.mul
     f64.nearest
     local.set $1
     local.get $2
     local.get $1
     f64.const 1.5707963109016418
     f64.mul
     f64.sub
     local.get $1
     f64.const 1.5893254773528196e-08
     f64.mul
     f64.sub
     global.set $~lib/math/rempio2f_y
     local.get $1
     i32.trunc_f64_s
     br $~lib/math/rempio2f|inlined.0
    end
    i32.const 184
    i32.load
    local.get $3
    i32.const 23
    i32.shr_s
    i32.const 152
    i32.sub
    local.tee $6
    i32.const 6
    i32.shr_s
    local.tee $9
    i32.const 3
    i32.shl
    i32.add
    i64.load offset=8
    local.set $10
    i32.const 184
    i32.load
    local.get $9
    i32.const 1
    i32.add
    i32.const 3
    i32.shl
    i32.add
    i64.load offset=8
    local.set $4
    local.get $6
    i32.const 63
    i32.and
    local.tee $6
    i32.const 32
    i32.gt_s
    if (result i64)
     local.get $4
     local.get $6
     i32.const 32
     i32.sub
     i64.extend_i32_s
     i64.shl
     i32.const 184
     i32.load
     local.get $9
     i32.const 2
     i32.add
     i32.const 3
     i32.shl
     i32.add
     i64.load offset=8
     i64.const 96
     local.get $6
     i64.extend_i32_s
     i64.sub
     i64.shr_u
     i64.or
    else     
     local.get $4
     i64.const 32
     local.get $6
     i64.extend_i32_s
     i64.sub
     i64.shr_u
    end
    local.set $8
    f64.const 8.515303950216386e-20
    local.get $0
    f64.promote_f32
    f64.copysign
    local.get $3
    i32.const 8388607
    i32.and
    i32.const 8388608
    i32.or
    i64.extend_i32_s
    local.tee $11
    local.get $4
    i64.const 64
    local.get $6
    i64.extend_i32_s
    local.tee $4
    i64.sub
    i64.shr_u
    local.get $10
    local.get $4
    i64.shl
    i64.or
    i64.mul
    local.get $8
    local.get $11
    i64.mul
    i64.const 32
    i64.shr_u
    i64.add
    local.tee $4
    i64.const 2
    i64.shl
    local.tee $8
    f64.convert_i64_s
    f64.mul
    global.set $~lib/math/rempio2f_y
    i32.const 0
    local.get $4
    i64.const 62
    i64.shr_u
    local.get $8
    i64.const 63
    i64.shr_u
    i64.add
    i32.wrap_i64
    local.tee $3
    i32.sub
    local.get $3
    local.get $7
    select
   end
   local.set $3
   global.get $~lib/math/rempio2f_y
   local.set $1
   local.get $3
   i32.const 1
   i32.and
   if (result f32)
    local.get $1
    local.get $1
    f64.mul
    local.tee $1
    local.get $1
    f64.mul
    local.set $2
    f64.const 1
    local.get $1
    f64.const -0.499999997251031
    f64.mul
    f64.add
    local.get $2
    f64.const 0.04166662332373906
    f64.mul
    f64.add
    local.get $2
    local.get $1
    f64.mul
    f64.const -0.001388676377460993
    local.get $1
    f64.const 2.439044879627741e-05
    f64.mul
    f64.add
    f64.mul
    f64.add
    f32.demote_f64
   else    
    local.get $1
    local.get $1
    local.get $1
    f64.mul
    local.tee $2
    local.get $1
    f64.mul
    local.tee $1
    f64.const -0.16666666641626524
    local.get $2
    f64.const 0.008333329385889463
    f64.mul
    f64.add
    f64.mul
    f64.add
    local.get $1
    local.get $2
    local.get $2
    f64.mul
    f64.mul
    f64.const -1.9839334836096632e-04
    local.get $2
    f64.const 2.718311493989822e-06
    f64.mul
    f64.add
    f64.mul
    f64.add
    f32.demote_f64
   end
   local.set $0
   local.get $0
   f32.neg
   local.get $0
   local.get $3
   i32.const 2
   i32.and
   select
   return
  end
  local.get $1
  local.get $5
  f64.const -0.16666666641626524
  local.get $2
  f64.const 0.008333329385889463
  f64.mul
  f64.add
  f64.mul
  f64.add
  local.get $5
  local.get $2
  local.get $2
  f64.mul
  f64.mul
  f64.const -1.9839334836096632e-04
  local.get $2
  f64.const 2.718311493989822e-06
  f64.mul
  f64.add
  f64.mul
  f64.add
  f32.demote_f64
 )
 (func $~lib/math/NativeMathf.cos (; 4 ;) (type $FUNCSIG$ff) (param $0 f32) (result f32)
  (local $1 f64)
  (local $2 f64)
  (local $3 i32)
  (local $4 i64)
  (local $5 i32)
  (local $6 i32)
  (local $7 f64)
  (local $8 i64)
  (local $9 i32)
  (local $10 i64)
  (local $11 i64)
  local.get $0
  i32.reinterpret_f32
  local.tee $3
  i32.const 31
  i32.shr_u
  local.set $6
  block $folding-inner1
   block $folding-inner0
    local.get $3
    i32.const 2147483647
    i32.and
    local.tee $3
    i32.const 1061752794
    i32.le_u
    if
     local.get $3
     i32.const 964689920
     i32.lt_u
     if
      f32.const 1
      return
     end
     local.get $0
     f64.promote_f32
     local.tee $1
     local.get $1
     f64.mul
     local.tee $1
     local.get $1
     f64.mul
     local.set $2
     br $folding-inner0
    end
    local.get $3
    i32.const 1081824209
    i32.le_u
    if
     local.get $3
     i32.const 1075235811
     i32.gt_u
     if
      local.get $0
      f64.promote_f32
      local.tee $1
      f64.const 3.141592653589793
      f64.add
      local.get $1
      f64.const 3.141592653589793
      f64.sub
      local.get $6
      select
      local.tee $1
      local.get $1
      f64.mul
      local.tee $1
      local.get $1
      f64.mul
      local.set $2
      f64.const 1
      local.get $1
      f64.const -0.499999997251031
      f64.mul
      f64.add
      local.get $2
      f64.const 0.04166662332373906
      f64.mul
      f64.add
      local.get $2
      local.get $1
      f64.mul
      f64.const -0.001388676377460993
      local.get $1
      f64.const 2.439044879627741e-05
      f64.mul
      f64.add
      f64.mul
      f64.add
      f32.demote_f64
      f32.neg
      return
     else      
      local.get $6
      if (result f64)
       local.get $0
       f64.promote_f32
       f64.const 1.5707963267948966
       f64.add
       local.tee $2
       local.get $2
       f64.mul
       local.tee $1
       local.get $2
       f64.mul
      else       
       f64.const 1.5707963267948966
       local.get $0
       f64.promote_f32
       f64.sub
       local.tee $2
       local.get $2
       f64.mul
       local.tee $1
       local.get $2
       f64.mul
      end
      local.set $7
      br $folding-inner1
     end
     unreachable
    end
    local.get $3
    i32.const 1088565717
    i32.le_u
    if
     local.get $3
     i32.const 1085271519
     i32.gt_u
     if
      local.get $0
      f64.promote_f32
      local.tee $1
      f64.const 6.283185307179586
      f64.add
      local.get $1
      f64.const 6.283185307179586
      f64.sub
      local.get $6
      select
      local.tee $1
      local.get $1
      f64.mul
      local.tee $1
      local.get $1
      f64.mul
      local.set $2
      br $folding-inner0
     else      
      local.get $6
      if (result f64)
       local.get $0
       f32.neg
       f64.promote_f32
       f64.const 4.71238898038469
       f64.sub
       local.tee $2
       local.get $2
       f64.mul
       local.tee $1
       local.get $2
       f64.mul
      else       
       local.get $0
       f64.promote_f32
       f64.const 4.71238898038469
       f64.sub
       local.tee $2
       local.get $2
       f64.mul
       local.tee $1
       local.get $2
       f64.mul
      end
      local.set $7
      br $folding-inner1
     end
     unreachable
    end
    local.get $3
    i32.const 2139095040
    i32.ge_u
    if
     local.get $0
     local.get $0
     f32.sub
     return
    end
    block $~lib/math/rempio2f|inlined.1 (result i32)
     local.get $3
     i32.const 1305022427
     i32.lt_u
     if
      local.get $0
      f64.promote_f32
      local.tee $2
      f64.const 0.6366197723675814
      f64.mul
      f64.nearest
      local.set $1
      local.get $2
      local.get $1
      f64.const 1.5707963109016418
      f64.mul
      f64.sub
      local.get $1
      f64.const 1.5893254773528196e-08
      f64.mul
      f64.sub
      global.set $~lib/math/rempio2f_y
      local.get $1
      i32.trunc_f64_s
      br $~lib/math/rempio2f|inlined.1
     end
     i32.const 184
     i32.load
     local.get $3
     i32.const 23
     i32.shr_s
     i32.const 152
     i32.sub
     local.tee $5
     i32.const 6
     i32.shr_s
     local.tee $9
     i32.const 3
     i32.shl
     i32.add
     i64.load offset=8
     local.set $10
     i32.const 184
     i32.load
     local.get $9
     i32.const 1
     i32.add
     i32.const 3
     i32.shl
     i32.add
     i64.load offset=8
     local.set $4
     local.get $5
     i32.const 63
     i32.and
     local.tee $5
     i32.const 32
     i32.gt_s
     if (result i64)
      local.get $4
      local.get $5
      i32.const 32
      i32.sub
      i64.extend_i32_s
      i64.shl
      i32.const 184
      i32.load
      local.get $9
      i32.const 2
      i32.add
      i32.const 3
      i32.shl
      i32.add
      i64.load offset=8
      i64.const 96
      local.get $5
      i64.extend_i32_s
      i64.sub
      i64.shr_u
      i64.or
     else      
      local.get $4
      i64.const 32
      local.get $5
      i64.extend_i32_s
      i64.sub
      i64.shr_u
     end
     local.set $8
     f64.const 8.515303950216386e-20
     local.get $0
     f64.promote_f32
     f64.copysign
     local.get $3
     i32.const 8388607
     i32.and
     i32.const 8388608
     i32.or
     i64.extend_i32_s
     local.tee $11
     local.get $4
     i64.const 64
     local.get $5
     i64.extend_i32_s
     local.tee $4
     i64.sub
     i64.shr_u
     local.get $10
     local.get $4
     i64.shl
     i64.or
     i64.mul
     local.get $8
     local.get $11
     i64.mul
     i64.const 32
     i64.shr_u
     i64.add
     local.tee $4
     i64.const 2
     i64.shl
     local.tee $8
     f64.convert_i64_s
     f64.mul
     global.set $~lib/math/rempio2f_y
     i32.const 0
     local.get $4
     i64.const 62
     i64.shr_u
     local.get $8
     i64.const 63
     i64.shr_u
     i64.add
     i32.wrap_i64
     local.tee $3
     i32.sub
     local.get $3
     local.get $6
     select
    end
    local.set $3
    global.get $~lib/math/rempio2f_y
    local.set $1
    local.get $3
    i32.const 1
    i32.and
    if (result f32)
     local.get $1
     local.get $1
     local.get $1
     f64.mul
     local.tee $2
     local.get $1
     f64.mul
     local.tee $1
     f64.const -0.16666666641626524
     local.get $2
     f64.const 0.008333329385889463
     f64.mul
     f64.add
     f64.mul
     f64.add
     local.get $1
     local.get $2
     local.get $2
     f64.mul
     f64.mul
     f64.const -1.9839334836096632e-04
     local.get $2
     f64.const 2.718311493989822e-06
     f64.mul
     f64.add
     f64.mul
     f64.add
     f32.demote_f64
    else     
     local.get $1
     local.get $1
     f64.mul
     local.tee $1
     local.get $1
     f64.mul
     local.set $2
     f64.const 1
     local.get $1
     f64.const -0.499999997251031
     f64.mul
     f64.add
     local.get $2
     f64.const 0.04166662332373906
     f64.mul
     f64.add
     local.get $2
     local.get $1
     f64.mul
     f64.const -0.001388676377460993
     local.get $1
     f64.const 2.439044879627741e-05
     f64.mul
     f64.add
     f64.mul
     f64.add
     f32.demote_f64
    end
    local.set $0
    local.get $0
    f32.neg
    local.get $0
    local.get $3
    i32.const 1
    i32.add
    i32.const 2
    i32.and
    select
    return
   end
   f64.const 1
   local.get $1
   f64.const -0.499999997251031
   f64.mul
   f64.add
   local.get $2
   f64.const 0.04166662332373906
   f64.mul
   f64.add
   local.get $2
   local.get $1
   f64.mul
   f64.const -0.001388676377460993
   local.get $1
   f64.const 2.439044879627741e-05
   f64.mul
   f64.add
   f64.mul
   f64.add
   f32.demote_f64
   return
  end
  local.get $2
  local.get $7
  f64.const -0.16666666641626524
  local.get $1
  f64.const 0.008333329385889463
  f64.mul
  f64.add
  f64.mul
  f64.add
  local.get $7
  local.get $1
  local.get $1
  f64.mul
  f64.mul
  f64.const -1.9839334836096632e-04
  local.get $1
  f64.const 2.718311493989822e-06
  f64.mul
  f64.add
  f64.mul
  f64.add
  f32.demote_f64
 )
 (func $src/assembly/circles/circles (; 5 ;) (type $FUNCSIG$viiffi) (param $0 i32) (param $1 i32) (param $2 f32) (param $3 f32) (param $4 i32)
  (local $5 i32)
  (local $6 f32)
  (local $7 f32)
  (local $8 f32)
  (local $9 f32)
  (local $10 i32)
  (local $11 f32)
  (local $12 f32)
  (local $13 f32)
  i32.const 0
  local.set $1
  loop $continue|0
   local.get $1
   local.get $0
   i32.load offset=8
   i32.const 2
   i32.shr_u
   i32.lt_s
   if
    local.get $0
    local.get $1
    call $~lib/internal/typedarray/TypedArray<f32>#__get
    local.set $7
    local.get $0
    local.get $1
    i32.const 1
    i32.add
    local.tee $1
    call $~lib/internal/typedarray/TypedArray<f32>#__get
    local.set $8
    local.get $0
    local.get $1
    i32.const 1
    i32.add
    local.tee $1
    call $~lib/internal/typedarray/TypedArray<f32>#__get
    local.set $9
    local.get $1
    i32.const 1
    i32.add
    local.tee $10
    i32.const 1
    i32.add
    local.set $1
    local.get $0
    local.get $10
    call $~lib/internal/typedarray/TypedArray<f32>#__get
    local.set $13
    local.get $7
    local.set $11
    local.get $8
    local.get $9
    local.get $3
    f32.mul
    f32.add
    local.set $6
    f32.const 0
    local.set $12
    loop $repeat|1
     block $break|1
      local.get $12
      local.get $13
      f32.lt
      i32.eqz
      br_if $break|1
      local.get $4
      local.get $5
      local.get $7
      call $~lib/internal/typedarray/TypedArray<f32>#__set
      local.get $4
      local.get $5
      i32.const 1
      i32.add
      local.tee $5
      local.get $8
      call $~lib/internal/typedarray/TypedArray<f32>#__set
      local.get $4
      local.get $5
      i32.const 1
      i32.add
      local.tee $5
      local.get $11
      call $~lib/internal/typedarray/TypedArray<f32>#__set
      local.get $4
      local.get $5
      i32.const 1
      i32.add
      local.tee $5
      local.get $6
      call $~lib/internal/typedarray/TypedArray<f32>#__set
      local.get $7
      f32.const 2
      local.get $12
      f32.const 1
      f32.add
      local.tee $12
      f32.mul
      f32.const 3.1415927410125732
      f32.mul
      local.get $13
      f32.div
      local.tee $6
      call $~lib/math/NativeMathf.sin
      local.get $9
      f32.mul
      local.get $2
      f32.mul
      f32.add
      local.set $11
      local.get $8
      local.get $6
      call $~lib/math/NativeMathf.cos
      local.get $9
      f32.mul
      local.get $3
      f32.mul
      f32.add
      local.set $6
      local.get $4
      local.get $5
      i32.const 1
      i32.add
      local.tee $5
      local.get $11
      call $~lib/internal/typedarray/TypedArray<f32>#__set
      local.get $5
      i32.const 1
      i32.add
      local.tee $10
      i32.const 1
      i32.add
      local.set $5
      local.get $4
      local.get $10
      local.get $6
      call $~lib/internal/typedarray/TypedArray<f32>#__set
      br $repeat|1
     end
    end
    br $continue|0
   end
  end
 )
 (func $src/assembly/shapes/shapes (; 6 ;) (type $FUNCSIG$viiffi) (param $0 i32) (param $1 i32) (param $2 f32) (param $3 f32) (param $4 i32)
  (local $5 i32)
  (local $6 i32)
  (local $7 i32)
  (local $8 i32)
  (local $9 f32)
  (local $10 f32)
  (local $11 f32)
  (local $12 f32)
  (local $13 i32)
  (local $14 i32)
  local.get $1
  i32.load offset=8
  i32.const 2
  i32.shr_u
  i32.const 2
  i32.div_s
  i32.const 1
  i32.sub
  local.set $13
  loop $continue|0
   local.get $6
   local.get $0
   i32.load offset=8
   i32.const 2
   i32.shr_u
   i32.lt_s
   if
    local.get $0
    local.get $6
    call $~lib/internal/typedarray/TypedArray<f32>#__get
    local.set $10
    local.get $0
    local.get $6
    i32.const 1
    i32.add
    local.tee $6
    call $~lib/internal/typedarray/TypedArray<f32>#__get
    local.set $11
    local.get $6
    i32.const 1
    i32.add
    local.tee $7
    i32.const 1
    i32.add
    local.set $6
    local.get $0
    local.get $7
    call $~lib/internal/typedarray/TypedArray<f32>#__get
    local.tee $9
    local.get $2
    f32.mul
    local.set $12
    local.get $9
    local.get $3
    f32.mul
    local.set $9
    i32.const 0
    local.set $7
    loop $repeat|1
     block $break|1
      local.get $7
      local.get $13
      i32.ge_s
      br_if $break|1
      local.get $4
      local.get $5
      local.get $10
      call $~lib/internal/typedarray/TypedArray<f32>#__set
      local.get $4
      local.get $5
      i32.const 1
      i32.add
      local.tee $5
      local.get $11
      call $~lib/internal/typedarray/TypedArray<f32>#__set
      local.get $4
      local.get $5
      i32.const 1
      i32.add
      local.tee $5
      local.get $10
      local.get $1
      local.get $7
      i32.const 1
      i32.shl
      local.tee $8
      call $~lib/internal/typedarray/TypedArray<f32>#__get
      local.get $12
      f32.mul
      f32.add
      call $~lib/internal/typedarray/TypedArray<f32>#__set
      local.get $4
      local.get $5
      i32.const 1
      i32.add
      local.tee $5
      local.get $11
      local.get $1
      local.get $8
      i32.const 1
      i32.add
      local.tee $8
      call $~lib/internal/typedarray/TypedArray<f32>#__get
      local.get $9
      f32.mul
      f32.add
      call $~lib/internal/typedarray/TypedArray<f32>#__set
      local.get $4
      local.get $5
      i32.const 1
      i32.add
      local.tee $5
      local.get $10
      local.get $1
      local.get $8
      i32.const 1
      i32.add
      local.tee $8
      call $~lib/internal/typedarray/TypedArray<f32>#__get
      local.get $12
      f32.mul
      f32.add
      call $~lib/internal/typedarray/TypedArray<f32>#__set
      local.get $5
      i32.const 1
      i32.add
      local.tee $14
      i32.const 1
      i32.add
      local.set $5
      local.get $4
      local.get $14
      local.get $11
      local.get $1
      local.get $8
      i32.const 1
      i32.add
      call $~lib/internal/typedarray/TypedArray<f32>#__get
      local.get $9
      f32.mul
      f32.add
      call $~lib/internal/typedarray/TypedArray<f32>#__set
      local.get $7
      i32.const 1
      i32.add
      local.set $7
      br $repeat|1
     end
    end
    br $continue|0
   end
  end
 )
 (func $src/assembly/edges/edges (; 7 ;) (type $FUNCSIG$vifffi) (param $0 i32) (param $1 f32) (param $2 f32) (param $3 f32) (param $4 i32)
  (local $5 i32)
  (local $6 f32)
  (local $7 f32)
  (local $8 f32)
  (local $9 f32)
  (local $10 f32)
  (local $11 i32)
  loop $repeat|0
   local.get $5
   local.get $0
   i32.load offset=8
   i32.const 2
   i32.shr_u
   i32.ge_s
   i32.eqz
   if
    local.get $0
    local.get $5
    call $~lib/internal/typedarray/TypedArray<f32>#__get
    local.set $6
    local.get $0
    local.get $5
    i32.const 1
    i32.add
    local.tee $11
    call $~lib/internal/typedarray/TypedArray<f32>#__get
    local.set $7
    local.get $0
    local.get $5
    i32.const 2
    i32.add
    call $~lib/internal/typedarray/TypedArray<f32>#__get
    local.get $6
    f32.sub
    local.get $2
    f32.div
    local.tee $6
    local.get $6
    f32.mul
    local.get $0
    local.get $5
    i32.const 3
    i32.add
    call $~lib/internal/typedarray/TypedArray<f32>#__get
    local.get $7
    f32.sub
    local.get $3
    f32.div
    local.tee $6
    local.get $6
    f32.mul
    f32.add
    f32.sqrt
    local.set $6
    local.get $0
    local.get $5
    call $~lib/internal/typedarray/TypedArray<f32>#__get
    local.set $7
    local.get $0
    local.get $11
    call $~lib/internal/typedarray/TypedArray<f32>#__get
    local.set $8
    local.get $6
    local.get $1
    local.get $6
    local.get $0
    local.get $5
    i32.const 4
    i32.add
    call $~lib/internal/typedarray/TypedArray<f32>#__get
    local.get $7
    f32.sub
    local.get $2
    f32.div
    local.tee $7
    local.get $7
    f32.mul
    local.get $0
    local.get $5
    i32.const 5
    i32.add
    call $~lib/internal/typedarray/TypedArray<f32>#__get
    local.get $8
    f32.sub
    local.get $3
    f32.div
    local.tee $7
    local.get $7
    f32.mul
    f32.add
    f32.sqrt
    local.tee $7
    f32.div
    f32.sqrt
    local.tee $10
    f32.mul
    f32.sub
    local.set $8
    local.get $7
    local.get $1
    local.get $10
    f32.div
    f32.sub
    local.set $9
    local.get $10
    f32.const 0
    f32.lt
    if
     f32.const 0
     local.set $8
     f32.const 0
     local.set $9
     f32.const 0
     local.set $7
     f32.const 0
     local.set $6
    end
    local.get $4
    local.get $5
    f32.const 0
    call $~lib/internal/typedarray/TypedArray<f32>#__set
    local.get $4
    local.get $5
    i32.const 1
    i32.add
    local.get $8
    local.get $9
    f32.add
    f32.const 2
    f32.div
    call $~lib/internal/typedarray/TypedArray<f32>#__set
    local.get $4
    local.get $5
    i32.const 2
    i32.add
    local.get $6
    call $~lib/internal/typedarray/TypedArray<f32>#__set
    local.get $4
    local.get $5
    i32.const 3
    i32.add
    local.get $8
    call $~lib/internal/typedarray/TypedArray<f32>#__set
    local.get $4
    local.get $5
    i32.const 4
    i32.add
    local.get $7
    call $~lib/internal/typedarray/TypedArray<f32>#__set
    local.get $4
    local.get $5
    i32.const 5
    i32.add
    local.get $9
    call $~lib/internal/typedarray/TypedArray<f32>#__set
    local.get $5
    i32.const 6
    i32.add
    local.set $5
    br $repeat|0
   end
  end
 )
 (func $~lib/internal/memory/memcmp (; 8 ;) (type $FUNCSIG$iiii) (param $0 i32) (param $1 i32) (param $2 i32) (result i32)
  (local $3 i32)
  local.get $0
  local.get $1
  i32.eq
  if
   i32.const 0
   return
  end
  loop $continue|0
   local.get $2
   i32.const 0
   i32.ne
   local.tee $3
   if
    local.get $0
    i32.load8_u
    local.get $1
    i32.load8_u
    i32.eq
    local.set $3
   end
   local.get $3
   if
    local.get $2
    i32.const 1
    i32.sub
    local.set $2
    local.get $0
    i32.const 1
    i32.add
    local.set $0
    local.get $1
    i32.const 1
    i32.add
    local.set $1
    br $continue|0
   end
  end
  local.get $2
  if (result i32)
   local.get $0
   i32.load8_u
   local.get $1
   i32.load8_u
   i32.sub
  else   
   i32.const 0
  end
 )
 (func $~lib/memory/memory.compare (; 9 ;) (type $FUNCSIG$iiii) (param $0 i32) (param $1 i32) (param $2 i32) (result i32)
  local.get $0
  local.get $1
  local.get $2
  call $~lib/internal/memory/memcmp
 )
 (func $~lib/allocator/tlsf/Root#setSLMap (; 10 ;) (type $FUNCSIG$viii) (param $0 i32) (param $1 i32) (param $2 i32)
  local.get $1
  i32.const 22
  i32.ge_u
  if
   i32.const 0
   i32.const 8
   i32.const 144
   i32.const 4
   call $~lib/env/abort
   unreachable
  end
  local.get $1
  i32.const 2
  i32.shl
  local.get $0
  i32.add
  local.get $2
  i32.store offset=4
 )
 (func $~lib/allocator/tlsf/Root#setHead (; 11 ;) (type $FUNCSIG$viiii) (param $0 i32) (param $1 i32) (param $2 i32) (param $3 i32)
  local.get $1
  i32.const 22
  i32.ge_u
  if
   i32.const 0
   i32.const 8
   i32.const 167
   i32.const 4
   call $~lib/env/abort
   unreachable
  end
  local.get $2
  i32.const 32
  i32.ge_u
  if
   i32.const 0
   i32.const 8
   i32.const 168
   i32.const 4
   call $~lib/env/abort
   unreachable
  end
  local.get $1
  i32.const 5
  i32.shl
  local.get $2
  i32.add
  i32.const 2
  i32.shl
  local.get $0
  i32.add
  local.get $3
  i32.store offset=96
 )
 (func $~lib/allocator/tlsf/Block#get:right (; 12 ;) (type $FUNCSIG$ii) (param $0 i32) (result i32)
  local.get $0
  i32.load
  i32.const -4
  i32.and
  i32.eqz
  if
   i32.const 0
   i32.const 8
   i32.const 89
   i32.const 4
   call $~lib/env/abort
   unreachable
  end
  local.get $0
  i32.const 8
  i32.add
  local.get $0
  i32.load
  i32.const -4
  i32.and
  i32.add
  local.tee $0
  i32.eqz
  if
   i32.const 0
   i32.const 8
   i32.const 90
   i32.const 11
   call $~lib/env/abort
   unreachable
  end
  local.get $0
 )
 (func $~lib/allocator/tlsf/fls<usize> (; 13 ;) (type $FUNCSIG$ii) (param $0 i32) (result i32)
  local.get $0
  i32.eqz
  if
   i32.const 0
   i32.const 8
   i32.const 428
   i32.const 2
   call $~lib/env/abort
   unreachable
  end
  i32.const 31
  local.get $0
  i32.clz
  i32.sub
 )
 (func $~lib/allocator/tlsf/Root#getHead (; 14 ;) (type $FUNCSIG$iiii) (param $0 i32) (param $1 i32) (param $2 i32) (result i32)
  local.get $1
  i32.const 22
  i32.ge_u
  if
   i32.const 0
   i32.const 8
   i32.const 158
   i32.const 4
   call $~lib/env/abort
   unreachable
  end
  local.get $2
  i32.const 32
  i32.ge_u
  if
   i32.const 0
   i32.const 8
   i32.const 159
   i32.const 4
   call $~lib/env/abort
   unreachable
  end
  local.get $1
  i32.const 5
  i32.shl
  local.get $2
  i32.add
  i32.const 2
  i32.shl
  local.get $0
  i32.add
  i32.load offset=96
 )
 (func $~lib/allocator/tlsf/Root#getSLMap (; 15 ;) (type $FUNCSIG$iii) (param $0 i32) (param $1 i32) (result i32)
  local.get $1
  i32.const 22
  i32.ge_u
  if
   i32.const 0
   i32.const 8
   i32.const 138
   i32.const 4
   call $~lib/env/abort
   unreachable
  end
  local.get $1
  i32.const 2
  i32.shl
  local.get $0
  i32.add
  i32.load offset=4
 )
 (func $~lib/allocator/tlsf/Root#remove (; 16 ;) (type $FUNCSIG$vii) (param $0 i32) (param $1 i32)
  (local $2 i32)
  (local $3 i32)
  (local $4 i32)
  (local $5 i32)
  local.get $1
  i32.load
  local.tee $2
  i32.const 1
  i32.and
  i32.eqz
  if
   i32.const 0
   i32.const 8
   i32.const 258
   i32.const 4
   call $~lib/env/abort
   unreachable
  end
  local.get $2
  i32.const -4
  i32.and
  local.tee $3
  i32.const 16
  i32.ge_u
  local.tee $2
  if
   local.get $3
   i32.const 1073741824
   i32.lt_u
   local.set $2
  end
  local.get $2
  i32.eqz
  if
   i32.const 0
   i32.const 8
   i32.const 260
   i32.const 4
   call $~lib/env/abort
   unreachable
  end
  local.get $3
  i32.const 256
  i32.lt_u
  if (result i32)
   local.get $3
   i32.const 8
   i32.div_u
   local.set $4
   i32.const 0
  else   
   local.get $3
   local.get $3
   call $~lib/allocator/tlsf/fls<usize>
   local.tee $2
   i32.const 5
   i32.sub
   i32.shr_u
   i32.const 32
   i32.xor
   local.set $4
   local.get $2
   i32.const 7
   i32.sub
  end
  local.set $2
  local.get $1
  i32.load offset=8
  local.set $3
  local.get $1
  i32.load offset=4
  local.tee $5
  if
   local.get $5
   local.get $3
   i32.store offset=8
  end
  local.get $3
  if
   local.get $3
   local.get $5
   i32.store offset=4
  end
  local.get $0
  local.get $2
  local.get $4
  call $~lib/allocator/tlsf/Root#getHead
  local.get $1
  i32.eq
  if
   local.get $0
   local.get $2
   local.get $4
   local.get $3
   call $~lib/allocator/tlsf/Root#setHead
   local.get $3
   i32.eqz
   if
    local.get $0
    local.get $2
    local.get $0
    local.get $2
    call $~lib/allocator/tlsf/Root#getSLMap
    i32.const 1
    local.get $4
    i32.shl
    i32.const -1
    i32.xor
    i32.and
    local.tee $1
    call $~lib/allocator/tlsf/Root#setSLMap
    local.get $1
    i32.eqz
    if
     local.get $0
     local.get $0
     i32.load
     i32.const 1
     local.get $2
     i32.shl
     i32.const -1
     i32.xor
     i32.and
     i32.store
    end
   end
  end
 )
 (func $~lib/allocator/tlsf/Block#get:left (; 17 ;) (type $FUNCSIG$ii) (param $0 i32) (result i32)
  local.get $0
  i32.load
  i32.const 2
  i32.and
  i32.eqz
  if
   i32.const 0
   i32.const 8
   i32.const 81
   i32.const 4
   call $~lib/env/abort
   unreachable
  end
  local.get $0
  i32.const 4
  i32.sub
  i32.load
  local.tee $0
  i32.eqz
  if
   i32.const 0
   i32.const 8
   i32.const 82
   i32.const 11
   call $~lib/env/abort
   unreachable
  end
  local.get $0
 )
 (func $~lib/allocator/tlsf/Root#setJump (; 18 ;) (type $FUNCSIG$vii) (param $0 i32) (param $1 i32)
  local.get $0
  i32.load
  i32.const 1
  i32.and
  i32.eqz
  if
   i32.const 0
   i32.const 8
   i32.const 334
   i32.const 4
   call $~lib/env/abort
   unreachable
  end
  local.get $0
  call $~lib/allocator/tlsf/Block#get:right
  local.get $1
  i32.ne
  if
   i32.const 0
   i32.const 8
   i32.const 335
   i32.const 4
   call $~lib/env/abort
   unreachable
  end
  local.get $1
  i32.load
  i32.const 2
  i32.and
  i32.eqz
  if
   i32.const 0
   i32.const 8
   i32.const 336
   i32.const 4
   call $~lib/env/abort
   unreachable
  end
  local.get $1
  i32.const 4
  i32.sub
  local.get $0
  i32.store
 )
 (func $~lib/allocator/tlsf/Root#insert (; 19 ;) (type $FUNCSIG$vii) (param $0 i32) (param $1 i32)
  (local $2 i32)
  (local $3 i32)
  (local $4 i32)
  (local $5 i32)
  local.get $1
  i32.eqz
  if
   i32.const 0
   i32.const 8
   i32.const 189
   i32.const 4
   call $~lib/env/abort
   unreachable
  end
  local.get $1
  i32.load
  local.tee $3
  i32.const 1
  i32.and
  i32.eqz
  if
   i32.const 0
   i32.const 8
   i32.const 191
   i32.const 4
   call $~lib/env/abort
   unreachable
  end
  local.get $1
  i32.load
  i32.const -4
  i32.and
  local.tee $4
  i32.const 16
  i32.ge_u
  local.tee $2
  if
   local.get $4
   i32.const 1073741824
   i32.lt_u
   local.set $2
  end
  local.get $2
  i32.eqz
  if
   i32.const 0
   i32.const 8
   i32.const 193
   i32.const 4
   call $~lib/env/abort
   unreachable
  end
  local.get $1
  call $~lib/allocator/tlsf/Block#get:right
  local.tee $2
  i32.eqz
  if
   i32.const 0
   i32.const 8
   i32.const 197
   i32.const 23
   call $~lib/env/abort
   unreachable
  end
  local.get $2
  i32.load
  local.tee $4
  i32.const 1
  i32.and
  if
   local.get $0
   local.get $2
   call $~lib/allocator/tlsf/Root#remove
   local.get $1
   local.get $4
   i32.const -4
   i32.and
   i32.const 8
   i32.add
   local.get $3
   i32.add
   local.tee $3
   i32.store
   local.get $1
   call $~lib/allocator/tlsf/Block#get:right
   local.tee $2
   i32.load
   local.set $4
  end
  local.get $3
  i32.const 2
  i32.and
  if
   local.get $1
   call $~lib/allocator/tlsf/Block#get:left
   local.tee $1
   i32.eqz
   if
    i32.const 0
    i32.const 8
    i32.const 211
    i32.const 24
    call $~lib/env/abort
    unreachable
   end
   local.get $1
   i32.load
   local.tee $5
   i32.const 1
   i32.and
   i32.eqz
   if
    i32.const 0
    i32.const 8
    i32.const 213
    i32.const 6
    call $~lib/env/abort
    unreachable
   end
   local.get $0
   local.get $1
   call $~lib/allocator/tlsf/Root#remove
   local.get $1
   local.get $3
   i32.const -4
   i32.and
   i32.const 8
   i32.add
   local.get $5
   i32.add
   local.tee $3
   i32.store
  end
  local.get $2
  local.get $4
  i32.const 2
  i32.or
  i32.store
  local.get $1
  local.get $2
  call $~lib/allocator/tlsf/Root#setJump
  local.get $3
  i32.const -4
  i32.and
  local.tee $3
  i32.const 16
  i32.ge_u
  local.tee $2
  if
   local.get $3
   i32.const 1073741824
   i32.lt_u
   local.set $2
  end
  local.get $2
  i32.eqz
  if
   i32.const 0
   i32.const 8
   i32.const 226
   i32.const 4
   call $~lib/env/abort
   unreachable
  end
  local.get $0
  local.get $3
  i32.const 256
  i32.lt_u
  if (result i32)
   local.get $3
   i32.const 8
   i32.div_u
   local.set $3
   i32.const 0
  else   
   local.get $3
   local.get $3
   call $~lib/allocator/tlsf/fls<usize>
   local.tee $2
   i32.const 5
   i32.sub
   i32.shr_u
   i32.const 32
   i32.xor
   local.set $3
   local.get $2
   i32.const 7
   i32.sub
  end
  local.tee $2
  local.get $3
  call $~lib/allocator/tlsf/Root#getHead
  local.set $4
  local.get $1
  i32.const 0
  i32.store offset=4
  local.get $1
  local.get $4
  i32.store offset=8
  local.get $4
  if
   local.get $4
   local.get $1
   i32.store offset=4
  end
  local.get $0
  local.get $2
  local.get $3
  local.get $1
  call $~lib/allocator/tlsf/Root#setHead
  local.get $0
  local.get $0
  i32.load
  i32.const 1
  local.get $2
  i32.shl
  i32.or
  i32.store
  local.get $0
  local.get $2
  local.get $0
  local.get $2
  call $~lib/allocator/tlsf/Root#getSLMap
  i32.const 1
  local.get $3
  i32.shl
  i32.or
  call $~lib/allocator/tlsf/Root#setSLMap
 )
 (func $~lib/allocator/tlsf/Root#addMemory (; 20 ;) (type $FUNCSIG$viii) (param $0 i32) (param $1 i32) (param $2 i32)
  (local $3 i32)
  (local $4 i32)
  local.get $1
  local.get $2
  i32.gt_u
  if
   i32.const 0
   i32.const 8
   i32.const 377
   i32.const 4
   call $~lib/env/abort
   unreachable
  end
  local.get $1
  i32.const 7
  i32.and
  if
   i32.const 0
   i32.const 8
   i32.const 378
   i32.const 4
   call $~lib/env/abort
   unreachable
  end
  local.get $2
  i32.const 7
  i32.and
  if
   i32.const 0
   i32.const 8
   i32.const 379
   i32.const 4
   call $~lib/env/abort
   unreachable
  end
  i32.const 2912
  i32.load
  local.tee $3
  if
   local.get $1
   local.get $3
   i32.const 4
   i32.add
   i32.lt_u
   if
    i32.const 0
    i32.const 8
    i32.const 384
    i32.const 6
    call $~lib/env/abort
    unreachable
   end
   local.get $1
   i32.const 8
   i32.sub
   local.get $3
   i32.eq
   if
    local.get $3
    i32.load
    local.set $4
    local.get $1
    i32.const 8
    i32.sub
    local.set $1
   end
  else   
   local.get $1
   local.get $0
   i32.const 2916
   i32.add
   i32.lt_u
   if
    i32.const 0
    i32.const 8
    i32.const 393
    i32.const 6
    call $~lib/env/abort
    unreachable
   end
  end
  local.get $2
  local.get $1
  i32.sub
  local.tee $2
  i32.const 32
  i32.lt_u
  if
   return
  end
  local.get $1
  local.get $4
  i32.const 2
  i32.and
  local.get $2
  i32.const 16
  i32.sub
  i32.const 1
  i32.or
  i32.or
  i32.store
  local.get $1
  i32.const 0
  i32.store offset=4
  local.get $1
  i32.const 0
  i32.store offset=8
  local.get $1
  local.get $2
  i32.add
  i32.const 8
  i32.sub
  local.tee $2
  i32.const 2
  i32.store
  i32.const 2912
  local.get $2
  i32.store
  local.get $0
  local.get $1
  call $~lib/allocator/tlsf/Root#insert
 )
 (func $~lib/allocator/tlsf/ffs<usize> (; 21 ;) (type $FUNCSIG$ii) (param $0 i32) (result i32)
  local.get $0
  i32.eqz
  if
   i32.const 0
   i32.const 8
   i32.const 422
   i32.const 2
   call $~lib/env/abort
   unreachable
  end
  local.get $0
  i32.ctz
 )
 (func $~lib/allocator/tlsf/Root#search (; 22 ;) (type $FUNCSIG$iii) (param $0 i32) (param $1 i32) (result i32)
  (local $2 i32)
  (local $3 i32)
  local.get $1
  i32.const 16
  i32.ge_u
  local.tee $2
  if
   local.get $1
   i32.const 1073741824
   i32.lt_u
   local.set $2
  end
  local.get $2
  i32.eqz
  if
   i32.const 0
   i32.const 8
   i32.const 296
   i32.const 4
   call $~lib/env/abort
   unreachable
  end
  local.get $1
  i32.const 256
  i32.lt_u
  if (result i32)
   i32.const 0
   local.set $2
   local.get $1
   i32.const 8
   i32.div_u
  else   
   local.get $1
   call $~lib/allocator/tlsf/fls<usize>
   local.tee $3
   i32.const 7
   i32.sub
   local.set $2
   local.get $1
   local.get $3
   i32.const 5
   i32.sub
   i32.shr_u
   i32.const 32
   i32.xor
   local.tee $1
   i32.const 31
   i32.lt_u
   if (result i32)
    local.get $1
    i32.const 1
    i32.add
   else    
    local.get $2
    i32.const 1
    i32.add
    local.set $2
    i32.const 0
   end
  end
  local.set $1
  local.get $0
  local.get $2
  call $~lib/allocator/tlsf/Root#getSLMap
  i32.const -1
  local.get $1
  i32.shl
  i32.and
  local.tee $1
  if (result i32)
   local.get $0
   local.get $2
   local.get $1
   call $~lib/allocator/tlsf/ffs<usize>
   call $~lib/allocator/tlsf/Root#getHead
  else   
   local.get $0
   i32.load
   i32.const -1
   local.get $2
   i32.const 1
   i32.add
   i32.shl
   i32.and
   local.tee $1
   if (result i32)
    local.get $0
    local.get $1
    call $~lib/allocator/tlsf/ffs<usize>
    local.tee $2
    call $~lib/allocator/tlsf/Root#getSLMap
    local.tee $1
    i32.eqz
    if
     i32.const 0
     i32.const 8
     i32.const 323
     i32.const 16
     call $~lib/env/abort
     unreachable
    end
    local.get $0
    local.get $2
    local.get $1
    call $~lib/allocator/tlsf/ffs<usize>
    call $~lib/allocator/tlsf/Root#getHead
   else    
    i32.const 0
   end
  end
 )
 (func $~lib/allocator/tlsf/Root#use (; 23 ;) (type $FUNCSIG$iiii) (param $0 i32) (param $1 i32) (param $2 i32) (result i32)
  (local $3 i32)
  (local $4 i32)
  local.get $1
  i32.load
  local.tee $4
  i32.const 1
  i32.and
  i32.eqz
  if
   i32.const 0
   i32.const 8
   i32.const 348
   i32.const 4
   call $~lib/env/abort
   unreachable
  end
  local.get $2
  i32.const 16
  i32.ge_u
  local.tee $3
  if
   local.get $2
   i32.const 1073741824
   i32.lt_u
   local.set $3
  end
  local.get $3
  i32.eqz
  if
   i32.const 0
   i32.const 8
   i32.const 349
   i32.const 4
   call $~lib/env/abort
   unreachable
  end
  local.get $2
  i32.const 7
  i32.and
  if
   i32.const 0
   i32.const 8
   i32.const 350
   i32.const 4
   call $~lib/env/abort
   unreachable
  end
  local.get $0
  local.get $1
  call $~lib/allocator/tlsf/Root#remove
  local.get $4
  i32.const -4
  i32.and
  local.get $2
  i32.sub
  local.tee $3
  i32.const 24
  i32.ge_u
  if
   local.get $1
   local.get $4
   i32.const 2
   i32.and
   local.get $2
   i32.or
   i32.store
   local.get $1
   i32.const 8
   i32.add
   local.get $2
   i32.add
   local.tee $2
   local.get $3
   i32.const 8
   i32.sub
   i32.const 1
   i32.or
   i32.store
   local.get $0
   local.get $2
   call $~lib/allocator/tlsf/Root#insert
  else   
   local.get $1
   local.get $4
   i32.const -2
   i32.and
   i32.store
   local.get $1
   call $~lib/allocator/tlsf/Block#get:right
   local.tee $0
   i32.eqz
   if
    i32.const 0
    i32.const 8
    i32.const 368
    i32.const 25
    call $~lib/env/abort
    unreachable
   end
   local.get $0
   local.get $0
   i32.load
   i32.const -3
   i32.and
   i32.store
  end
  local.get $1
  i32.const 8
  i32.add
 )
 (func $~lib/allocator/tlsf/__memory_allocate (; 24 ;) (type $FUNCSIG$ii) (param $0 i32) (result i32)
  (local $1 i32)
  (local $2 i32)
  (local $3 i32)
  global.get $~lib/allocator/tlsf/ROOT
  local.tee $2
  i32.eqz
  if
   i32.const 1
   current_memory
   local.tee $1
   i32.gt_s
   local.tee $2
   if (result i32)
    i32.const 1
    local.get $1
    i32.sub
    grow_memory
    i32.const 0
    i32.lt_s
   else    
    local.get $2
   end
   if
    unreachable
   end
   i32.const 192
   local.set $2
   i32.const 192
   global.set $~lib/allocator/tlsf/ROOT
   i32.const 2912
   i32.const 0
   i32.store
   i32.const 192
   i32.const 0
   i32.store
   i32.const 0
   local.set $1
   loop $repeat|0
    local.get $1
    i32.const 22
    i32.lt_u
    if
     i32.const 192
     local.get $1
     i32.const 0
     call $~lib/allocator/tlsf/Root#setSLMap
     i32.const 0
     local.set $3
     loop $repeat|1
      local.get $3
      i32.const 32
      i32.lt_u
      if
       i32.const 192
       local.get $1
       local.get $3
       i32.const 0
       call $~lib/allocator/tlsf/Root#setHead
       local.get $3
       i32.const 1
       i32.add
       local.set $3
       br $repeat|1
      end
     end
     local.get $1
     i32.const 1
     i32.add
     local.set $1
     br $repeat|0
    end
   end
   i32.const 192
   i32.const 3112
   current_memory
   i32.const 16
   i32.shl
   call $~lib/allocator/tlsf/Root#addMemory
  end
  local.get $0
  i32.const 1073741824
  i32.gt_u
  if
   unreachable
  end
  local.get $2
  local.get $0
  i32.const 7
  i32.add
  i32.const -8
  i32.and
  local.tee $0
  i32.const 16
  local.get $0
  i32.const 16
  i32.gt_u
  select
  local.tee $1
  call $~lib/allocator/tlsf/Root#search
  local.tee $0
  i32.eqz
  if
   current_memory
   local.tee $0
   local.get $1
   i32.const 65535
   i32.add
   i32.const -65536
   i32.and
   i32.const 16
   i32.shr_u
   local.tee $3
   local.get $0
   local.get $3
   i32.gt_s
   select
   grow_memory
   i32.const 0
   i32.lt_s
   if
    local.get $3
    grow_memory
    i32.const 0
    i32.lt_s
    if
     unreachable
    end
   end
   local.get $2
   local.get $0
   i32.const 16
   i32.shl
   current_memory
   i32.const 16
   i32.shl
   call $~lib/allocator/tlsf/Root#addMemory
   local.get $2
   local.get $1
   call $~lib/allocator/tlsf/Root#search
   local.tee $0
   i32.eqz
   if
    i32.const 0
    i32.const 8
    i32.const 480
    i32.const 12
    call $~lib/env/abort
    unreachable
   end
  end
  local.get $0
  i32.load
  i32.const -4
  i32.and
  local.get $1
  i32.lt_u
  if
   i32.const 0
   i32.const 8
   i32.const 483
   i32.const 2
   call $~lib/env/abort
   unreachable
  end
  local.get $2
  local.get $0
  local.get $1
  call $~lib/allocator/tlsf/Root#use
 )
 (func $~lib/memory/memory.allocate (; 25 ;) (type $FUNCSIG$ii) (param $0 i32) (result i32)
  local.get $0
  call $~lib/allocator/tlsf/__memory_allocate
 )
 (func $~lib/allocator/tlsf/__memory_free (; 26 ;) (type $FUNCSIG$vi) (param $0 i32)
  (local $1 i32)
  (local $2 i32)
  (local $3 i32)
  local.get $0
  if
   global.get $~lib/allocator/tlsf/ROOT
   local.tee $1
   if
    local.get $0
    i32.const 8
    i32.sub
    local.tee $2
    i32.load
    local.tee $3
    i32.const 1
    i32.and
    if
     i32.const 0
     i32.const 8
     i32.const 494
     i32.const 6
     call $~lib/env/abort
     unreachable
    end
    local.get $2
    local.get $3
    i32.const 1
    i32.or
    i32.store
    local.get $1
    local.get $0
    i32.const 8
    i32.sub
    call $~lib/allocator/tlsf/Root#insert
   end
  end
 )
 (func $~lib/memory/memory.free (; 27 ;) (type $FUNCSIG$vi) (param $0 i32)
  local.get $0
  call $~lib/allocator/tlsf/__memory_free
 )
 (func $~lib/memory/memory.reset (; 28 ;) (type $FUNCSIG$v)
  unreachable
 )
 (func $start (; 29 ;) (type $FUNCSIG$v)
  nop
 )
)
