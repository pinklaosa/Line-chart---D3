{"version":3,"file":"d3fc-webgl.js","sources":["../src/cartesian.js","../src/webgl/helper/initShaders.js","../src/webgl/helper/buffer.js","../src/webgl/shaders/base.js","../src/webgl/shaders/raw.js","../src/webgl/shaders/pointsBase.js","../src/webgl/shaders/circles.js","../src/webgl/shaders/pointTextures.js","../src/webgl/helper/api.js","../src/functor.js","../src/defined.js","../src/alignOffset.js","../src/base.js","../src/xyBase.js","../src/webgl/glBase.js","../src/colors.js","../src/webgl/helper/glColor.js","../src/webgl/bar.js","../src/webgl/line.js","../src/webgl/area.js","../src/webgl/point.js","../src/groupedBase.js","../src/webgl/grouped.js"],"sourcesContent":["import {select} from 'd3-selection';\r\nimport {chartCartesian} from '@d3fc/d3fc-chart';\r\nimport {rebindAll} from '@d3fc/d3fc-rebind';\r\n\r\nexport default (xScale, yScale) => {\r\n  const base = chartCartesian(xScale, yScale);\r\n  const chart = (selection) => {\r\n    const result = base(selection);\r\n\r\n    selection.select('d3fc-canvas.plot-area')\r\n      .on('draw', (d, i, nodes) => {\r\n            const canvas = select(nodes[i])\r\n                .select('canvas')\r\n                .node();\r\n            const series = base.canvasPlotArea();\r\n\r\n            series.context(canvas.getContext('webgl'))\r\n                .xScale(xScale)\r\n                .yScale(yScale);\r\n            series(d);\r\n      });\r\n\r\n    return result;\r\n  }\r\n  rebindAll(chart, base);\r\n  return chart;\r\n};\r\n","\r\n// Initialize a shader program, so WebGL knows how to draw our data\r\nexport default (gl, vsSource, fsSource) => {\r\n    const vertexShader = loadShader(gl, gl.VERTEX_SHADER, vsSource);\r\n    const fragmentShader = loadShader(gl, gl.FRAGMENT_SHADER, fsSource);\r\n\r\n    // Create the shader program\r\n    const shaderProgram = gl.createProgram();\r\n    gl.attachShader(shaderProgram, vertexShader);\r\n    gl.attachShader(shaderProgram, fragmentShader);\r\n    gl.linkProgram(shaderProgram);\r\n\r\n    // If creating the shader program failed, alert\r\n    if (!gl.getProgramParameter(shaderProgram, gl.LINK_STATUS)) {\r\n        console.error('Unable to initialize the shader program: ' + gl.getProgramInfoLog(shaderProgram));\r\n        return null;\r\n    }\r\n\r\n    return shaderProgram;\r\n};\r\n\r\n// creates a shader of the given type, uploads the source and compiles it.\r\nfunction loadShader(gl, type, source) {\r\n    const shader = gl.createShader(type);\r\n\r\n    // Send the source to the shader object\r\n    gl.shaderSource(shader, source);\r\n\r\n    // Compile the shader program\r\n    gl.compileShader(shader);\r\n\r\n    // See if it compiled successfully\r\n    if (!gl.getShaderParameter(shader, gl.COMPILE_STATUS)) {\r\n        console.error('An error occurred compiling the shaders: ' + gl.getShaderInfoLog(shader));\r\n        gl.deleteShader(shader);\r\n        return null;\r\n    }\r\n\r\n    return shader;\r\n}\r\n","export default (gl) => {\r\n    let glBuffer = gl.createBuffer();\r\n\r\n    const buffer = (array) => {\r\n        // Select this buffer as the one to apply buffer operations to.\r\n        gl.bindBuffer(gl.ARRAY_BUFFER, glBuffer);\r\n\r\n        // Only create a copy if it's not already a Float32Array\r\n        const srcArray = (array.constructor === Float32Array) ? array : new Float32Array(array);\r\n\r\n        gl.bufferData(gl.ARRAY_BUFFER, srcArray, gl.STATIC_DRAW);\r\n        return glBuffer;\r\n    };\r\n\r\n    buffer.addr = () => glBuffer;\r\n    return buffer;\r\n};\r\n","import initShaders from '../helper/initShaders';\r\nimport buffer from '../helper/buffer';\r\n\r\n// Base shader for rendering points\r\n\r\nexport default (gl, vsSource, fsSource) => {\r\n    let numComponents = 2;\r\n\r\n    const positionBuffer = buffer(gl);\r\n\r\n    let lastColor = [-1, -1, -1, -1];\r\n\r\n    const shaderProgram = initShaders(gl, vsSource, fsSource);\r\n    const vertexLocation = gl.getAttribLocation(shaderProgram, 'aVertexPosition');\r\n    const offsetLocation = gl.getUniformLocation(shaderProgram, 'uOffset');\r\n    const scaleLocation = gl.getUniformLocation(shaderProgram, 'uScale');\r\n    const seriesColorLocation = gl.getUniformLocation(shaderProgram, 'uSeriesColor');\r\n\r\n    const draw = (positions, color, mode = gl.TRIANGLES, offset = 0, count = -1) => {\r\n        const fColor = color || [0.0, 0.0, 0.0, 0.0];\r\n        if (fColor.some((c, i) => c !== lastColor[i])) {\r\n            setColor(fColor);\r\n        }\r\n\r\n        positionBuffer(positions);\r\n\r\n        const vertexCount = count !== -1 ? count : positions.length / numComponents - offset;\r\n        gl.drawArrays(mode, offset, vertexCount);\r\n    };\r\n\r\n    draw.activate = () => {\r\n        setupProgram();\r\n        lastColor = [-1, -1, -1, -1];\r\n    };\r\n\r\n    draw.setModelView = ({offset, scale}) => {\r\n        gl.uniform2fv(\r\n            offsetLocation,\r\n            offset);\r\n        gl.uniform2fv(\r\n            scaleLocation,\r\n            scale);\r\n    };\r\n\r\n    draw.shaderProgram = () => shaderProgram;\r\n\r\n    draw.numComponents = (...args) => {\r\n        if (!args.length) {\r\n            return numComponents;\r\n        }\r\n        numComponents = args[0];\r\n        return draw;\r\n    };\r\n\r\n    function setupProgram() {\r\n        // Tell WebGL to use our program when drawing\r\n        gl.useProgram(shaderProgram);\r\n\r\n        // Tell WebGL how to pull out the positions from the position\r\n        // buffer into the vertexPosition attribute.\r\n        {\r\n            const type = gl.FLOAT;    // the data in the buffer is 32bit floats\r\n            const normalize = false;  // don't normalize\r\n            const stride = 0;         // how many bytes to get from one set of values to the next\r\n            // 0 = use type and numComponents above\r\n            const offset = 0;         // how many bytes inside the buffer to start from\r\n            gl.bindBuffer(gl.ARRAY_BUFFER, positionBuffer.addr());\r\n            gl.vertexAttribPointer(\r\n                vertexLocation,\r\n                numComponents,\r\n                type,\r\n                normalize,\r\n                stride,\r\n                offset);\r\n            gl.enableVertexAttribArray(vertexLocation);\r\n        }\r\n    }\r\n\r\n    function setColor(color) {\r\n        gl.uniform4fv(\r\n            seriesColorLocation,\r\n            color);\r\n    }\r\n\r\n    return draw;\r\n};\r\n","import {rebindAll} from '@d3fc/d3fc-rebind';\r\nimport baseShader from './base';\r\n\r\n// Shader program to draw filled triangles\r\n\r\n// Vertex shader program\r\nconst vsSource = `\r\n  attribute vec4 aVertexPosition;\r\n\r\n  uniform vec2 uOffset;\r\n  uniform vec2 uScale;\r\n\r\n  void main() {\r\n    vec2 vertex = vec2(aVertexPosition[0], aVertexPosition[1]);\r\n    vec2 clipSpace = 2.0 * (vertex - uOffset) / uScale - 1.0;\r\n    gl_Position = vec4(clipSpace, 0.0, 1.0);\r\n  }\r\n`;\r\n\r\nconst fsSource = `\r\n  precision mediump float;\r\n  uniform vec4 uSeriesColor;\r\n\r\n  void main() {\r\n    gl_FragColor = uSeriesColor;\r\n  }\r\n`;\r\n\r\n// Available modes:\r\n// gl.TRIANGLES\r\n// gl.TRIANGLE_STRIP\r\n// gl.TRIANGLE_FAN\r\n// gl.LINES\r\n// gl.LINES_STRIP\r\nexport default (gl) => {\r\n    const base = baseShader(gl, vsSource, fsSource);\r\n\r\n    const draw = (positions, color, mode = gl.TRIANGLES, offset = 0, count = -1) => {\r\n        base(positions, color, mode, offset, count);\r\n    };\r\n\r\n    rebindAll(draw, base);\r\n    return draw;\r\n};\r\n","import {rebindAll, exclude} from '@d3fc/d3fc-rebind';\r\nimport baseShader from './base';\r\n\r\n// Base shader for rendering points\r\n\r\nexport default (gl, vsSource, fsSource) => {\r\n    const base = baseShader(gl, vsSource, fsSource).numComponents(3);\r\n\r\n    let lastWidth = -1;\r\n    let lastStrokeColor = [-1, -1, -1, -1];\r\n\r\n    const edgeColorLocation = gl.getUniformLocation(base.shaderProgram(), 'uEdgeColor');\r\n    const lineWidthLocation = gl.getUniformLocation(base.shaderProgram(), 'uLineWidth');\r\n\r\n    const draw = (positions, color, lineWidth = 0, strokeColor = null) => {\r\n        const fColor = color || [0.0, 0.0, 0.0, 0.0];\r\n        const sColor = strokeColor || fColor;\r\n        if ((lineWidth !== lastWidth) ||\r\n                sColor.some((c, i) => c !== lastStrokeColor[i])) {\r\n            setColor(lineWidth, sColor);\r\n            lastWidth = lineWidth;\r\n            lastStrokeColor = sColor;\r\n        }\r\n\r\n        base(positions, color, gl.POINTS);\r\n    };\r\n\r\n    draw.activate = () => {\r\n        base.activate();\r\n        lastStrokeColor = [-1, -1, -1, -1];\r\n    };\r\n\r\n    function setColor(lineWidth, strokeColor) {\r\n        gl.uniform4fv(\r\n            edgeColorLocation,\r\n            strokeColor);\r\n        gl.uniform1f(\r\n            lineWidthLocation,\r\n            lineWidth);\r\n    }\r\n\r\n    rebindAll(draw, base, exclude('activate'));\r\n    return draw;\r\n};\r\n","import {rebindAll} from '@d3fc/d3fc-rebind';\r\nimport pointsBase from './pointsBase';\r\n\r\n// Shader program to draw circles at points\r\n\r\n// Vertex shader program\r\nconst vsSource = `\r\nprecision lowp float;\r\nattribute vec4 aVertexPosition;\r\n\r\nuniform vec2 uOffset;\r\nuniform vec2 uScale;\r\nuniform float uLineWidth;\r\n\r\nvarying float vSize;\r\n\r\nvoid main() {\r\n    vec2 vertex = vec2(aVertexPosition[0], aVertexPosition[1]);\r\n    vec2 clipSpace = 2.0 * (vertex - uOffset) / uScale - 1.0;\r\n\r\n    vSize = sqrt(aVertexPosition[2]) + uLineWidth / 2.0;\r\n    gl_PointSize = vSize + 1.0;\r\n    gl_Position = vec4(clipSpace, 0.0, 1.0);\r\n}`;\r\n\r\nconst fsSource = `\r\nprecision lowp float;\r\n\r\nuniform float uLineWidth;\r\nuniform vec4 uEdgeColor;\r\nuniform vec4 uSeriesColor;\r\n\r\nvarying float vSize;\r\n\r\nvoid main() {\r\n    float dist = length(2.0 * gl_PointCoord - 1.0) * vSize;\r\n    float inner = vSize - 2.0 * uLineWidth - 1.0;\r\n\r\n    if (dist > vSize + 1.0) {\r\n        discard;\r\n    } else if (uEdgeColor[3] < 0.1) {\r\n        gl_FragColor = vec4(0.0, 0.0, 0.0, 1.0);\r\n    } else if (dist < inner) {\r\n        gl_FragColor = uSeriesColor;\r\n    } else {\r\n        float rAlias = clamp((dist - vSize) / 2.0 + 0.5, 0.0, 1.0);\r\n        vec4 transparent = vec4(0.0);\r\n        vec4 edgeColor = rAlias * transparent + (1.0 - rAlias) * uEdgeColor;\r\n\r\n        float rEdge = clamp(dist - inner, 0.0, 1.0);\r\n        gl_FragColor = rEdge * edgeColor + (1.0 - rEdge) * uSeriesColor;\r\n    }\r\n}`;\r\n\r\nexport default gl => {\r\n    const base = pointsBase(gl, vsSource, fsSource);\r\n\r\n    const draw = (positions, color, lineWidth = 0, strokeColor = null) => {\r\n        base(positions, color, lineWidth, strokeColor);\r\n    };\r\n\r\n    rebindAll(draw, base);\r\n    return draw;\r\n};\r\n","import {rebindAll} from '@d3fc/d3fc-rebind';\r\nimport pointsBase from './pointsBase';\r\n\r\n// Shader program to draw circles at points\r\n\r\n// Vertex shader program\r\nconst vsSource = `\r\nprecision lowp float;\r\nattribute vec4 aVertexPosition;\r\n\r\nuniform vec2 uOffset;\r\nuniform vec2 uScale;\r\nuniform float uLineWidth;\r\n\r\nvarying float vSize;\r\n\r\nvoid main() {\r\n    vec2 vertex = vec2(aVertexPosition[0], aVertexPosition[1]);\r\n    vec2 clipSpace = 2.0 * (vertex - uOffset) / uScale - 1.0;\r\n\r\n    vSize = sqrt(aVertexPosition[2]) * 2.0 + uLineWidth / 2.0;\r\n    gl_PointSize = vSize + 1.0;\r\n    gl_Position = vec4(clipSpace, 0.0, 1.0);\r\n}`;\r\n\r\nconst fsSource = `\r\nprecision lowp float;\r\n\r\nuniform float uLineWidth;\r\nuniform vec4 uEdgeColor;\r\nuniform vec4 uSeriesColor;\r\nuniform sampler2D uSampler;\r\n\r\nvarying float vSize;\r\n\r\nbool edge(vec2 coord) {\r\n    float w = uLineWidth / vSize;\r\n    vec4 tex1 = texture2D(uSampler, coord + vec2(0, w), -0.5);\r\n    vec4 tex2 = texture2D(uSampler, coord + vec2(0, -w), -0.5);\r\n    vec4 tex3 = texture2D(uSampler, coord + vec2(w, 0), -0.5);\r\n    vec4 tex4 = texture2D(uSampler, coord + vec2(-w, 0), -0.5);\r\n\r\n    return (tex1[3] + tex2[3] + tex3[3] + tex4[3]) < 3.8;\r\n}\r\n\r\nvoid main() {\r\n    vec4 edgeTex = texture2D(uSampler, gl_PointCoord, -0.5);\r\n\r\n    if (uEdgeColor[3] < 0.1) {\r\n        gl_FragColor = edgeTex;\r\n    } else if (uLineWidth < 0.1) {\r\n        gl_FragColor = uSeriesColor * edgeTex[3];\r\n    } else {\r\n        if (edge(gl_PointCoord)) {\r\n            gl_FragColor = uEdgeColor * edgeTex[3];\r\n        } else if (uSeriesColor[3] < 0.1) {\r\n            gl_FragColor = edgeTex;\r\n        } else {\r\n            gl_FragColor = uSeriesColor;\r\n        }\r\n    }\r\n}`;\r\n\r\nexport default (gl) => {\r\n    const base = pointsBase(gl, vsSource, fsSource);\r\n\r\n    const texture = gl.createTexture();\r\n    const samplerLocation = gl.getUniformLocation(base.shaderProgram(), 'uSampler');\r\n\r\n    const draw = (positions, image, color, lineWidth = 0, strokeColor = null) => {\r\n        setupTexture(image);\r\n\r\n        base(positions, color, lineWidth, strokeColor);\r\n    };\r\n\r\n    function setupTexture(image) {\r\n        // Tell WebGL we want to affect texture unit 0\r\n        gl.activeTexture(gl.TEXTURE0);\r\n        gl.bindTexture(gl.TEXTURE_2D, texture);\r\n        gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE, image);\r\n\r\n        // WebGL1 has different requirements for power of 2 images\r\n        // vs non power of 2 images so check if the image is a\r\n        // power of 2 in both dimensions.\r\n        if (isPowerOf2(image.width) && isPowerOf2(image.height)) {\r\n            // Yes, it's a power of 2. Generate mips.\r\n            gl.generateMipmap(gl.TEXTURE_2D);\r\n        } else {\r\n            // No, it's not a power of 2. Turn off mips and set\r\n            // wrapping to clamp to edge\r\n            gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\r\n            gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\r\n            gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR);\r\n        }\r\n\r\n        // Tell the shader we bound the texture to texture unit 0\r\n        gl.uniform1i(samplerLocation, 0);\r\n    };\r\n\r\n    rebindAll(draw, base);\r\n    return draw;\r\n};\r\n\r\nfunction isPowerOf2(value) {\r\n    return (value & (value - 1)) === 0;\r\n}\r\n","import raw from '../shaders/raw';\r\nimport circles from '../shaders/circles';\r\nimport pointTextures from '../shaders/pointTextures';\r\n\r\nconst drawFunctions = {\r\n    raw,\r\n    circles,\r\n    pointTextures\r\n};\r\n\r\nexport const PRIVATE = '__d3fcAPI';\r\n\r\nexport default (gl) => {\r\n    gl.viewport(0, 0, gl.canvas.width, gl.canvas.height);\r\n    if (gl[PRIVATE]) return gl[PRIVATE];\r\n\r\n    gl.enable(gl.BLEND);\r\n    gl.blendFunc(gl.SRC_ALPHA, gl.ONE_MINUS_SRC_ALPHA);\r\n\r\n    const drawModules = {};\r\n    let modelView = null;\r\n\r\n    // Helper API functions\r\n    const api = {};\r\n\r\n    let activated;\r\n    Object.keys(drawFunctions).forEach(key => {\r\n        api[key] = (...args) => {\r\n            if (!drawModules[key]) {\r\n                // Lazy-load the shaders when used\r\n                drawModules[key] = drawFunctions[key](gl);\r\n            }\r\n\r\n            // Activate the shader if not already activate\r\n            if (activated !== key) drawModules[key].activate();\r\n            activated = key;\r\n\r\n            drawModules[key].setModelView(modelView);\r\n            return drawModules[key](...args);\r\n        };\r\n    });\r\n\r\n    api.applyScales = (xScale, yScale) => {\r\n        const x = convertScale(xScale, gl.canvas.width, false);\r\n        const y = convertScale(yScale, gl.canvas.height, true);\r\n\r\n        modelView = {\r\n            offset: [x.offset, y.offset],\r\n            scale: [x.scaleFactor, y.scaleFactor]\r\n        };\r\n\r\n        return {\r\n            pixel: {\r\n                x: x.pixelSize,\r\n                y: y.pixelSize\r\n            },\r\n            xScale: x.scale,\r\n            yScale: y.scale\r\n        };\r\n    };\r\n\r\n    const isLinear = scale => {\r\n        if (scale.domain && scale.range && scale.clamp && !scale.exponent && !scale.base) {\r\n            return !scale.clamp();\r\n        }\r\n        return false;\r\n    };\r\n\r\n    const convertScale = (scale, screenSize, invert = false) => {\r\n        const range = scale.range();\r\n        const domain = scale.domain();\r\n        const invertConst = invert ? -1 : 1;\r\n\r\n        // screen: (0 -> screenSize), scale: (range[0] -> range[1])\r\n        if (isLinear(scale)) {\r\n            const asDate = domain[0] instanceof Date;\r\n            const numDomain = asDate ? domain.map(d => d.valueOf()) : domain;\r\n            const scaleFn = asDate ? d => d.valueOf() :  d => d;\r\n\r\n            // Calculate the screen-space domain for the projection\r\n            const domainSize = (numDomain[1] - numDomain[0]) * screenSize / (range[1] - range[0]);\r\n\r\n            // numDomain[0] = screenDomainStart + range[0] * domainSize / screenSize;\r\n            const screenDomainStart = numDomain[0] - domainSize * range[0] / screenSize;\r\n            const screenDomain = [screenDomainStart, screenDomainStart + domainSize];\r\n\r\n            return {\r\n                pixelSize: Math.abs((screenDomain[1] - screenDomain[0]) / screenSize),\r\n                offset: screenDomain[invert ? 1 : 0],\r\n                scaleFactor: invertConst * (screenDomain[1] - screenDomain[0]),\r\n                scale: scaleFn\r\n            };\r\n        } else {\r\n            const screenRange = range.map(r => 2 * r / screenSize - 1);\r\n            const factor = (screenRange[1] - screenRange[0]) / (range[1] - range[0]);\r\n            const scaleFn = d => (scale(d) - range[0]) * factor + screenRange[0];\r\n\r\n            return {\r\n                pixelSize: Math.abs(2 / screenSize),\r\n                offset: invert ? 1 : -1,\r\n                scaleFactor: invertConst * 2,\r\n                scale: scaleFn\r\n            };\r\n        }\r\n    };\r\n\r\n    gl[PRIVATE] = api;\r\n    return api;\r\n};\r\n","export default (d) => typeof d === 'function' ? d : () => d;\r\n","// Checks that passes properties are 'defined', meaning that calling them with (d, i) returns non null values\r\nexport default function defined() {\r\n  const outerArguments = arguments;\r\n  return function(d, i) {\r\n      for (let c = 0, j = outerArguments.length; c < j; c++) {\r\n          if (outerArguments[c](d, i) == null) {\r\n              return false;\r\n          }\r\n      }\r\n      return true;\r\n  };\r\n}\r\n","// determines the offset required along the cross scale based\r\n// on the series alignment\r\nexport default (align, width) => {\r\n  switch (align) {\r\n  case 'left':\r\n      return width / 2;\r\n  case 'right':\r\n      return -width / 2;\r\n  default:\r\n      return 0;\r\n  }\r\n};\r\n","export default initialValues => {\r\n\r\n  const env = Object.assign({}, initialValues);\r\n  const base = () => {};\r\n\r\n  Object.keys(env).forEach(key => {\r\n      base[key] = (...args) => {\r\n          if (!args.length) {\r\n              return env[key];\r\n          }\r\n          env[key] = args[0];\r\n          return base;\r\n      };\r\n  });\r\n\r\n  return base;\r\n};\r\n","import { scaleIdentity } from 'd3-scale';\r\nimport functor from './functor';\r\nimport defined from './defined';\r\nimport alignOffset from './alignOffset';\r\nimport createBase from './base';\r\n\r\nexport default () => {\r\n\r\n    let baseValue = () => 0;\r\n    let crossValue = d => d.x;\r\n    let mainValue = d => d.y;\r\n    let align = 'center';\r\n    let bandwidth = () => 5;\r\n    let orient = 'vertical';\r\n\r\n    const base = createBase({\r\n        decorate: () => {},\r\n        defined: (d, i) => defined(baseValue, crossValue, mainValue)(d, i),\r\n        xScale: scaleIdentity(),\r\n        yScale: scaleIdentity()\r\n    });\r\n\r\n    base.values = (d, i) => {\r\n        const width = bandwidth(d, i);\r\n        const offset = alignOffset(align, width);\r\n        const xScale = base.xScale();\r\n        const yScale = base.yScale();\r\n\r\n        if (orient === 'vertical') {\r\n            const y = yScale(mainValue(d, i), i);\r\n            const y0 = yScale(baseValue(d, i), i);\r\n            const x = xScale(crossValue(d, i), i) + offset;\r\n            return {\r\n                d,\r\n                x,\r\n                y,\r\n                y0,\r\n                width,\r\n                height: y - y0,\r\n                origin: [x, y],\r\n                baseOrigin: [x, y0],\r\n                transposedX: x,\r\n                transposedY: y\r\n            };\r\n        } else {\r\n            const y = xScale(mainValue(d, i), i);\r\n            const y0 = xScale(baseValue(d, i), i);\r\n            const x = yScale(crossValue(d, i), i) + offset;\r\n            return {\r\n                d,\r\n                x,\r\n                y,\r\n                y0,\r\n                width,\r\n                height: y - y0,\r\n                origin: [y, x],\r\n                baseOrigin: [y0, x],\r\n                transposedX: y,\r\n                transposedY: x\r\n            };\r\n        }\r\n    };\r\n\r\n    base.baseValue = (...args) => {\r\n        if (!args.length) {\r\n            return baseValue;\r\n        }\r\n        baseValue = functor(args[0]);\r\n        return base;\r\n    };\r\n    base.crossValue = (...args) => {\r\n        if (!args.length) {\r\n            return crossValue;\r\n        }\r\n        crossValue = functor(args[0]);\r\n        return base;\r\n    };\r\n    base.mainValue = (...args) => {\r\n        if (!args.length) {\r\n            return mainValue;\r\n        }\r\n        mainValue = functor(args[0]);\r\n        return base;\r\n    };\r\n    base.bandwidth = (...args) => {\r\n        if (!args.length) {\r\n            return bandwidth;\r\n        }\r\n        bandwidth = functor(args[0]);\r\n        return base;\r\n    };\r\n    base.align = (...args) => {\r\n        if (!args.length) {\r\n            return align;\r\n        }\r\n        align = args[0];\r\n        return base;\r\n    };\r\n    base.orient = (...args) => {\r\n        if (!args.length) {\r\n            return orient;\r\n        }\r\n        orient = args[0];\r\n        return base;\r\n    };\r\n\r\n    return base;\r\n};\r\n","import { rebindAll } from '@d3fc/d3fc-rebind';\r\n\r\nimport helper from './helper/api';\r\nimport xyBase from '../xyBase';\r\n\r\nexport default () => {\r\n    const base = xyBase();\r\n\r\n    let context = null;\r\n    let cacheEnabled = false;\r\n\r\n    let glAPI = null;\r\n    let cached = null;\r\n\r\n    const glBase = (data, helperAPI) => {\r\n        base();\r\n        glAPI = helperAPI || helper(context);\r\n    };\r\n\r\n    glBase.context = (...args) => {\r\n        if (!args.length) {\r\n            return context;\r\n        }\r\n        context = args[0];\r\n        return glBase;\r\n    };\r\n\r\n    glBase.cacheEnabled = (...args) => {\r\n        if (!args.length) {\r\n            return cacheEnabled;\r\n        }\r\n        cacheEnabled = args[0];\r\n        cached = null;\r\n        return glBase;\r\n    };\r\n\r\n    glBase.cached = (...args) => {\r\n        if (!args.length) {\r\n            return cached;\r\n        }\r\n        cached = cacheEnabled ? args[0] : null;\r\n        return glBase;\r\n    };\r\n\r\n    glBase.glAPI = () => glAPI;\r\n\r\n    rebindAll(glBase, base);\r\n    return glBase;\r\n};\r\n","const red = '#c60';\r\nconst green = '#6c0';\r\nconst black = '#000';\r\nconst gray = '#ddd';\r\nconst darkGray = '#999';\r\n\r\nexport default {\r\n    red,\r\n    green,\r\n    black,\r\n    gray,\r\n    darkGray\r\n};\r\n","import {color} from 'd3-color';\r\n\r\nconst toGl = v => v / 255;\r\nexport default value => {\r\n    if (!value) return null;\r\n    const c = color(value);\r\n    return [toGl(c.r), toGl(c.g), toGl(c.b), Math.sqrt(c.opacity)];\r\n};\r\n","import { rebindAll, exclude } from '@d3fc/d3fc-rebind';\r\n\r\nimport glBase from './glBase';\r\nimport colors from '../colors';\r\nimport glColor from './helper/glColor';\r\nimport alignOffset from '../alignOffset';\r\n\r\nexport default () => {\r\n    const base = glBase();\r\n\r\n    const bar = (data, helperAPI) => {\r\n        base(data, helperAPI);\r\n        const context = base.context();\r\n        const glAPI = base.glAPI();\r\n\r\n        const scales = glAPI.applyScales(base.xScale(), base.yScale());\r\n\r\n        context.fillStyle = colors.darkGray;\r\n        context.strokeStyle = 'transparent';\r\n        base.decorate()(context, data, 0);\r\n\r\n        const fillColor = glColor(context.fillStyle);\r\n        const withLines = context.strokeStyle !== 'transparent';\r\n\r\n        const filteredData = data.filter(base.defined());\r\n        const projected = getProjectedData(filteredData, withLines, scales);\r\n\r\n        glAPI.raw(projected.triangles, fillColor, context.TRIANGLES);\r\n\r\n        if (projected.lines) {\r\n            const strokeColor = withLines ? glColor(context.strokeStyle) : null;\r\n            glAPI.raw(projected.lines, strokeColor, context.LINES);\r\n        }\r\n    };\r\n\r\n    const getProjectedData = (data, withLines, scales) => {\r\n        const pixel = scales.pixel;\r\n        const cachedProjected = base.cached();\r\n        if (cachedProjected && cachedProjected.pixel.x === pixel.x && (!withLines || cachedProjected.lines)) {\r\n            return cachedProjected;\r\n        }\r\n\r\n        const crossFn = base.crossValue();\r\n        const mainFn = base.mainValue();\r\n        const baseFn = base.baseValue();\r\n        const vertical = base.orient() === 'vertical';\r\n\r\n        // 2 triangles per bar, with 3 x/y vertices per triangle\r\n        const triangles = new Float32Array(data.length * 12);\r\n        let triangleIndex = 0;\r\n\r\n        const insertTriangle = (x1, y1, x2, y2, x3, y3) => {\r\n            triangles[triangleIndex++] = x1;\r\n            triangles[triangleIndex++] = y1;\r\n            triangles[triangleIndex++] = x2;\r\n            triangles[triangleIndex++] = y2;\r\n            triangles[triangleIndex++] = x3;\r\n            triangles[triangleIndex++] = y3;\r\n        };\r\n\r\n        // 3 lines per bar, with 2 x/y vertices per line\r\n        const lines = withLines ? new Float32Array(data.length * 12) : null;\r\n        let lineIndex = 0;\r\n\r\n        const insertLine = (x1, y1, x2, y2) => {\r\n            lines[lineIndex++] = x1;\r\n            lines[lineIndex++] = y1;\r\n            lines[lineIndex++] = x2;\r\n            lines[lineIndex++] = y2;\r\n        };\r\n\r\n        const insertBar = (x1, y1, x2, y2, x3, y3, x4, y4) => {\r\n            insertTriangle(x1, y1, x2, y2, x3, y3);\r\n            insertTriangle(x3, y3, x4, y4, x1, y1);\r\n\r\n            if (withLines) {\r\n                insertLine(x1, y1, x2, y2);\r\n                insertLine(x2, y2, x3, y3);\r\n                insertLine(x3, y3, x4, y4);\r\n            }\r\n        };\r\n\r\n        data.forEach((d, i) => {\r\n            const width = bar.bandwidth()(d, i);\r\n            const offset = alignOffset(bar.align(), width) - width / 2;\r\n\r\n            if (vertical) {\r\n                const y = scales.yScale(mainFn(d, i), i);\r\n                const y0 = scales.yScale(baseFn(d, i), i);\r\n                const xl = scales.xScale(crossFn(d, i), i) + offset * pixel.x;\r\n                const xr = xl + width * pixel.x;\r\n\r\n                insertBar(\r\n                    xl, y0,\r\n                    xl, y,\r\n                    xr, y,\r\n                    xr, y0\r\n                );\r\n            } else {\r\n                const x = scales.xScale(mainFn(d, i), i);\r\n                const x0 = scales.xScale(baseFn(d, i), i);\r\n                const yu = scales.yScale(crossFn(d, i), i) + offset * pixel.y;\r\n                const yd = yu + width * pixel.y;\r\n\r\n                insertBar(\r\n                    x0, yu,\r\n                    x, yu,\r\n                    x, yd,\r\n                    x0, yd\r\n                );\r\n            }\r\n        });\r\n\r\n        const projectedData = {triangles, lines, pixel};\r\n        base.cached(projectedData);\r\n        return projectedData;\r\n    };\r\n\r\n    rebindAll(bar, base, exclude('glAPI', 'cached'));\r\n    return bar;\r\n};\r\n","import { rebindAll, exclude } from '@d3fc/d3fc-rebind';\r\n\r\nimport glBase from './glBase';\r\nimport colors from '../colors';\r\nimport glColor from './helper/glColor';\r\n\r\nexport default () => {\r\n    const base = glBase();\r\n\r\n    const line = (data, helperAPI) => {\r\n        base(data, helperAPI);\r\n        const context = base.context();\r\n        const glAPI = base.glAPI();\r\n\r\n        const scales = glAPI.applyScales(base.xScale(), base.yScale());\r\n\r\n        context.strokeStyle = colors.black;\r\n        context.lineWidth = 1;\r\n        base.decorate()(context, data, 0);\r\n\r\n        // Get triangle strip representing the projected data\r\n        const lineWidth = parseInt(context.lineWidth);\r\n        const strokeColor = glColor(context.strokeStyle);\r\n\r\n        const projected = (data.constructor === Float32Array)\r\n                ? rawFloat32Data(data) : getProjectedData(data, scales);\r\n\r\n        if (lineWidth < 1.1) {\r\n            // Draw straight to WebGL as line strips\r\n            projected.batches.forEach(batch => {\r\n                glAPI.raw(projected.points, strokeColor, context.LINE_STRIP, batch.offset, batch.count);\r\n            });\r\n        } else {\r\n            // Convert to a triangle strip\r\n            projected.batches.forEach(batch => {\r\n                const projectedTriangles = getProjectedTriangles(projected.points, batch.offset, batch.count, scales, lineWidth);\r\n                glAPI.raw(projectedTriangles, strokeColor, context.TRIANGLE_STRIP);\r\n            });\r\n        }\r\n    };\r\n\r\n    const rawFloat32Data = data => {\r\n        return {\r\n            points: data,\r\n            batches: [{ offset: 0, count: data.length / 2 }]\r\n        };\r\n    };\r\n\r\n    const getBatches = data => {\r\n        if (data.constructor === Float32Array) {\r\n            return [{ offset: 0, count: data.length / 2 }];\r\n        }\r\n\r\n        // Check the `defined` function for missing entries, and\r\n        // break the line into segments for drawing\r\n        const batches = [];\r\n        let offset = 0;\r\n\r\n        const pushBatch = (index) => {\r\n            if (index > offset) {\r\n                batches.push({offset, count: index - offset});\r\n            }\r\n            offset = index + 1;\r\n        };\r\n\r\n        data.forEach((d, i) => {\r\n            if (!line.defined()(d, i)) {\r\n                pushBatch(i);\r\n            }\r\n        });\r\n        pushBatch(data.length);\r\n        return batches;\r\n    };\r\n\r\n    const getProjectedData = (data, scales) => {\r\n        const cachedProjected = base.cached();\r\n        if (cachedProjected) {\r\n            return cachedProjected;\r\n        }\r\n\r\n        const crossFn = base.crossValue();\r\n        const mainFn = base.mainValue();\r\n        const vertical = base.orient() === 'vertical';\r\n\r\n        const points = new Float32Array(data.length * 2);\r\n        let index = 0;\r\n\r\n        if (vertical) {\r\n            data.forEach((d, i) => {\r\n                points[index++] = scales.xScale(crossFn(d, i), i);\r\n                points[index++] = scales.yScale(mainFn(d, i), i);\r\n            });\r\n        } else {\r\n            data.forEach((d, i) => {\r\n                points[index++] = scales.xScale(mainFn(d, i), i);\r\n                points[index++] = scales.yScale(crossFn(d, i), i);\r\n            });\r\n        }\r\n\r\n        const batches = getBatches(data);\r\n\r\n        const projected = {points, batches};\r\n        base.cached(projected);\r\n        return projected;\r\n    };\r\n\r\n    const getProjectedTriangles = (points, offset, count, scales, lineWidth) => {\r\n        // Two vertices for each data point\r\n        const pixel = scales.pixel;\r\n        const result = new Float32Array(count * 4);\r\n\r\n        // Split points based on normals\r\n        let target = 0;\r\n        const factor = 0.5 * lineWidth;\r\n\r\n        const start = offset * 2;\r\n        const end = start + count * 2;\r\n        for (let index = start; index < end; index += 2) {\r\n            const normal = getNormal(points, start, end, index, pixel);\r\n            const normalPixels = [normal[0] * pixel.x * factor, normal[1] * pixel.y * factor];\r\n\r\n            // Apply to the pair of points\r\n            result[target++] = points[index] + normalPixels[0];\r\n            result[target++] = points[index + 1] + normalPixels[1];\r\n            result[target++] = points[index] - normalPixels[0];\r\n            result[target++] = points[index + 1] - normalPixels[1];\r\n        }\r\n\r\n        return result;\r\n    };\r\n\r\n    const normaliseVector = (vector) => {\r\n        const length = Math.sqrt(vector[0] * vector[0] + vector[1] * vector[1]);\r\n        return [vector[0] / length, vector[1] / length];\r\n    };\r\n    const lineNormal = (p1, p2) => normaliseVector([(p2[1] - p1[1]), -(p2[0] - p1[0])]);\r\n\r\n    const getNormal = (points, start, end, index, pixel) => {\r\n        let lastPoint = index > start && [points[index - 2] / pixel.x, points[index - 1] / pixel.y];\r\n        let thisPoint = [points[index] / pixel.x, points[index + 1] / pixel.y];\r\n        let nextPoint = index < end - 2 && [points[index + 2] / pixel.x, points[index + 3] / pixel.y];\r\n\r\n        if (!lastPoint) {\r\n            // Beginning of line\r\n            return lineNormal(thisPoint, nextPoint);\r\n        } else if (!nextPoint) {\r\n            // End of line\r\n            return lineNormal(lastPoint, thisPoint);\r\n        }\r\n\r\n        // Calculate the miter join\r\n        const l1 = normaliseVector([thisPoint[0] - lastPoint[0], thisPoint[1] - lastPoint[1]]);\r\n        const l2 = normaliseVector([nextPoint[0] - thisPoint[0], nextPoint[1] - thisPoint[1]]);\r\n\r\n        const tangent = normaliseVector([l1[0] + l2[0], l1[1] + l2[1]]);\r\n        const miter = [-tangent[1], tangent[0]];\r\n\r\n        // Get length using dot product of the miter with one of the normals\r\n        const normal1 = lineNormal(lastPoint, thisPoint);\r\n        const length = 1 / (miter[0] * normal1[0] + miter[1] * normal1[1]);\r\n\r\n        return [miter[0] * length, miter[1] * length];\r\n    };\r\n\r\n    rebindAll(line, base, exclude('glAPI', 'cached', 'baseValue', 'bandwidth', 'align'));\r\n    return line;\r\n};\r\n","import { rebindAll, exclude } from '@d3fc/d3fc-rebind';\r\n\r\nimport glBase from './glBase';\r\nimport colors from '../colors';\r\nimport glColor from './helper/glColor';\r\n\r\nexport default () => {\r\n    const base = glBase();\r\n\r\n    const area = (data, helperAPI) => {\r\n        base(data, helperAPI);\r\n        const context = base.context();\r\n        const glAPI = base.glAPI();\r\n\r\n        const scales = glAPI.applyScales(base.xScale(), base.yScale());\r\n\r\n        context.fillStyle = colors.gray;\r\n        context.strokeStyle = 'transparent';\r\n        base.decorate()(context, data, 0);\r\n\r\n        const fillColor = glColor(context.fillStyle);\r\n        const withLines = context.strokeStyle !== 'transparent';\r\n\r\n        const projected = getProjectedData(data, withLines, scales);\r\n\r\n        projected.batches.area.forEach(batch => {\r\n            glAPI.raw(projected.triangles, fillColor, context.TRIANGLE_STRIP, batch.offset, batch.count);\r\n        });\r\n\r\n        if (projected.lines) {\r\n            const strokeColor = withLines ? glColor(context.strokeStyle) : null;\r\n\r\n            projected.batches.line.forEach(batch => {\r\n                glAPI.raw(projected.lines, strokeColor, context.LINE_STRIP, batch.offset, batch.count);\r\n            });\r\n        }\r\n    };\r\n\r\n    const getProjectedData = (data, withLines, scales) => {\r\n        const cachedProjected = base.cached();\r\n        if (cachedProjected && (!withLines || cachedProjected.lines)) {\r\n            return cachedProjected;\r\n        }\r\n\r\n        const crossFn = base.crossValue();\r\n        const mainFn = base.mainValue();\r\n        const baseFn = base.baseValue();\r\n        const vertical = base.orient() === 'vertical';\r\n\r\n        // 2 triangles per data point, but as a triangle-strip,\r\n        // so only 2 vertices per data point\r\n        const dataPoints = new Float32Array(data.length * 4);\r\n        let index = 0;\r\n\r\n        const lines = withLines ? new Float32Array(data.length * 2) : null;\r\n        let lineIndex = 0;\r\n        let crossoverCount = 0;\r\n\r\n        const areaBatches = { offset: 0, batches: [] };\r\n        const lineBatches = { offset: 0, batches: [] };\r\n\r\n        // \"Batches\" keep track of where we have to not-render points because\r\n        // the are not \"defined\"\r\n        const pushBatch = (batchSet, index) => {\r\n            if (index > batchSet.offset) {\r\n                batchSet.batches.push({offset: batchSet.offset, count: index - batchSet.offset});\r\n            }\r\n            batchSet.offset = index;\r\n        };\r\n        const pushBatches = () => {\r\n            pushBatch(areaBatches, index / 2 + crossoverCount * 2);\r\n            pushBatch(lineBatches, lineIndex / 2);\r\n        };\r\n\r\n        let lastPositive;\r\n        data.forEach((d, i) => {\r\n            if (area.defined()(d, i)) {\r\n                let p;\r\n                if (vertical) {\r\n                    p = {\r\n                        x: scales.xScale(crossFn(d, i), i),\r\n                        y: scales.yScale(mainFn(d, i), i),\r\n                        y0: scales.yScale(baseFn(d, i), i)\r\n                    };\r\n                    p.x0 = p.x;\r\n\r\n                    p.positive = (p.y - p.y0) && (p.y - p.y0) > 0;\r\n                } else {\r\n                    p = {\r\n                        x: scales.xScale(mainFn(d, i), i),\r\n                        y: scales.yScale(crossFn(d, i), i),\r\n                        x0: scales.xScale(baseFn(d, i), i)\r\n                    };\r\n                    p.y0 = p.y;\r\n\r\n                    p.positive = (p.x - p.x0) !== 0 && (p.x - p.x0) > 0;\r\n                }\r\n\r\n                dataPoints[index++] = p.x;\r\n                dataPoints[index++] = p.y;\r\n                dataPoints[index++] = p.x0;\r\n                dataPoints[index++] = p.y0;\r\n\r\n                if (withLines) {\r\n                    lines[lineIndex++] = p.x;\r\n                    lines[lineIndex++] = p.y;\r\n                }\r\n\r\n                if (lastPositive !== undefined && p.positive !== undefined && p.positive !== lastPositive) {\r\n                    // If we swapped from positive to negative (or vice versa), we need to\r\n                    // add a cross-over points (unless one of them was not \"defined\")\r\n                    crossoverCount++;\r\n                }\r\n                lastPositive = p.positive;\r\n            } else {\r\n                pushBatches();\r\n                lastPositive = undefined;\r\n            }\r\n        });\r\n        pushBatches();\r\n\r\n        // If we have any cross-over points to add, insert them now\r\n        const triangles = crossoverCount > 0\r\n                ? insertCrossovers(data, dataPoints, crossoverCount)\r\n                : dataPoints;\r\n\r\n        const batches = {\r\n            area: areaBatches.batches,\r\n            line: lineBatches.batches\r\n        };\r\n        const projectedData = {triangles, lines, batches};\r\n        base.cached(projectedData);\r\n        return projectedData;\r\n    };\r\n\r\n    const insertCrossovers = (data, dataPoints, crossoverCount) => {\r\n        // We need to insert two extra vertices for each crossover\r\n        const triangles = new Float32Array(dataPoints.length + crossoverCount * 4);\r\n        let index = 0;\r\n        let triangleIndex = 0;\r\n\r\n        const vertical = base.orient() === 'vertical';\r\n        let last = null;\r\n\r\n        data.forEach((d, i) => {\r\n            if (area.defined()(d, i)) {\r\n                const x = dataPoints[index++];\r\n                const y = dataPoints[index++];\r\n                const x0 = dataPoints[index++];\r\n                const y0 = dataPoints[index++];\r\n\r\n                const positive = vertical ? (y - y0) > 0 : (x - x0) > 0;\r\n                if (last && positive !== last.positive) {\r\n                    // Insert the extra one at the crossover\r\n                    let r;\r\n                    if (vertical) {\r\n                        r = Math.abs(last.y - last.y0) / (Math.abs(y - y0) + Math.abs(last.y - last.y0));\r\n                    } else {\r\n                        r = Math.abs(last.x - last.x0) / (Math.abs(x - x0) + Math.abs(last.x - last.x0));\r\n                    }\r\n                    const midx = last.x + r * (x - last.x);\r\n                    const midy = last.y + r * (y - last.y);\r\n\r\n                    // Add the same point twice to skip rendering an unwanted triangle\r\n                    triangles[triangleIndex++] = midx;\r\n                    triangles[triangleIndex++] = midy;\r\n                    triangles[triangleIndex++] = midx;\r\n                    triangles[triangleIndex++] = midy;\r\n                }\r\n\r\n                last = {positive, x, y, x0, y0};\r\n\r\n                triangles[triangleIndex++] = x;\r\n                triangles[triangleIndex++] = y;\r\n                triangles[triangleIndex++] = x0;\r\n                triangles[triangleIndex++] = y0;\r\n            } else {\r\n                last = null;\r\n            }\r\n        });\r\n\r\n        return triangles;\r\n    };\r\n\r\n    rebindAll(area, base, exclude('glAPI', 'cached', 'bandwidth', 'align'));\r\n    return area;\r\n};\r\n","import { symbol, symbolCircle } from 'd3-shape';\r\nimport { rebindAll, exclude } from '@d3fc/d3fc-rebind';\r\nimport glBase from './glBase';\r\nimport colors from '../colors';\r\n\r\nimport glColor from './helper/glColor';\r\n\r\nexport default () => {\r\n    const base = glBase();\r\n\r\n    let size = 70;\r\n    let type = symbolCircle;\r\n    let imagePromise = null;\r\n\r\n    const point = (data, helperAPI) => {\r\n        base(data, helperAPI);\r\n        const context = base.context();\r\n        const glAPI = base.glAPI();\r\n\r\n        const scales = glAPI.applyScales(base.xScale(), base.yScale());\r\n\r\n        context.strokeStyle = type ? colors.black : undefined;\r\n        context.fillStyle = type ? colors.gray : undefined;\r\n        context.lineWidth = 1;\r\n        base.decorate()(context, data, 0);\r\n\r\n        const projectedData = (data.constructor === Float32Array)\r\n                ? data : getProjectedData(data, scales);\r\n\r\n        const fillColor = glColor(context.fillStyle);\r\n        const lineWidth = context.strokeStyle !== 'transparent' ? parseInt(context.lineWidth) : 0;\r\n        const strokeColor = lineWidth > 0 ? glColor(context.strokeStyle) : null;\r\n        if (type === symbolCircle) {\r\n            glAPI.circles(projectedData, fillColor, lineWidth, strokeColor);\r\n        } else {\r\n            imagePromise.then(image => {\r\n                glAPI.pointTextures(projectedData, image, fillColor, lineWidth, strokeColor);\r\n            });\r\n        }\r\n    };\r\n\r\n    const getProjectedData = (data, scales) => {\r\n        const cachedProjected = base.cached();\r\n        if (cachedProjected) {\r\n            return cachedProjected;\r\n        }\r\n\r\n        const filteredData = data.filter(base.defined());\r\n\r\n        const crossFn = base.crossValue();\r\n        const mainFn = base.mainValue();\r\n        const sizeFn = typeof size === 'function' ? size : () => size;\r\n        const vertical = base.orient() === 'vertical';\r\n\r\n        const result = new Float32Array(data.length * 3);\r\n        let index = 0;\r\n\r\n        if (vertical) {\r\n            filteredData.forEach((d, i) => {\r\n                result[index++] = scales.xScale(crossFn(d, i), i);\r\n                result[index++] = scales.yScale(mainFn(d, i), i);\r\n                result[index++] = sizeFn(d);\r\n            });\r\n        } else {\r\n            filteredData.forEach((d, i) => {\r\n                result[index++] = scales.xScale(mainFn(d, i), i);\r\n                result[index++] = scales.yScale(crossFn(d, i), i);\r\n                result[index++] = sizeFn(d);\r\n            });\r\n        }\r\n\r\n        base.cached(result);\r\n        return result;\r\n    };\r\n\r\n    point.size = (...args) => {\r\n        if (!args.length) {\r\n            return size;\r\n        }\r\n        size = args[0];\r\n        return point;\r\n    };\r\n\r\n    point.type = (...args) => {\r\n        if (!args.length) {\r\n            return type;\r\n        }\r\n        type = args[0];\r\n\r\n        if (type !== symbolCircle) {\r\n            imagePromise = getSymbolImage(type);\r\n        } else {\r\n            imagePromise = null;\r\n        }\r\n        return point;\r\n    };\r\n\r\n    point.image = img => {\r\n        type = null;\r\n        imagePromise = new Promise(resolve => {\r\n            if (img.complete) {\r\n                resolve(img);\r\n            } else {\r\n                img.onload = () => {\r\n                    resolve(img);\r\n                };\r\n            }\r\n        });\r\n        return point;\r\n    };\r\n\r\n    rebindAll(point, base, exclude('glAPI', 'cached', 'baseValue', 'bandwidth', 'align'));\r\n    return point;\r\n};\r\n\r\nconst textureSize = 256;\r\nconst getSymbolImage = (type) => {\r\n    return new Promise(resolve => {\r\n        const canvas = document.createElement('canvas');\r\n        canvas.width = textureSize;\r\n        canvas.height = textureSize;\r\n\r\n        const context = canvas.getContext('2d');\r\n        context.fillStyle = '#000';\r\n        const halfSize = textureSize / 2;\r\n        context.translate(halfSize, halfSize);\r\n        context.beginPath();\r\n        symbol().type(type).size(halfSize * halfSize).context(context)();\r\n        context.closePath();\r\n        context.fill();\r\n\r\n        var image = new window.Image();\r\n        image.src = canvas.toDataURL();\r\n        image.onload = () => {\r\n            resolve(image);\r\n        };\r\n    });\r\n};\r\n","import { scaleLinear, scaleBand } from 'd3-scale';\r\nimport { range } from 'd3-array';\r\nimport { rebindAll, includeMap } from '@d3fc/d3fc-rebind';\r\nimport functor from './functor';\r\nimport alignOffset from './alignOffset';\r\nimport createBase from './base';\r\n\r\nexport default (series) => {\r\n\r\n    let bandwidth = () => 50;\r\n    let align = 'center';\r\n\r\n    // the offset scale is used to offset each of the series within a group\r\n    const offsetScale = scaleBand();\r\n\r\n    const grouped = createBase({\r\n        decorate: () => {},\r\n        xScale: scaleLinear(),\r\n        yScale: scaleLinear()\r\n    });\r\n\r\n    // the bandwidth for the grouped series can be a function of datum / index. As a result\r\n    // the offset scale required to cluster the 'sub' series is also dependent on datum / index.\r\n    // This function computes the offset scale for a specific datum / index of the grouped series\r\n    grouped.offsetScaleForDatum = (data, d, i) => {\r\n        const width = bandwidth(d, i);\r\n        const offset = alignOffset(align, width);\r\n\r\n        const halfWidth = width / 2;\r\n        return offsetScale\r\n          .domain(range(0, data.length))\r\n          .range([-halfWidth + offset, halfWidth + offset]);\r\n    };\r\n\r\n    grouped.bandwidth = (...args) => {\r\n        if (!args.length) {\r\n            return bandwidth;\r\n        }\r\n        bandwidth = functor(args[0]);\r\n        return grouped;\r\n    };\r\n    grouped.align = (...args) => {\r\n        if (!args.length) {\r\n            return align;\r\n        }\r\n        align = args[0];\r\n        return grouped;\r\n    };\r\n\r\n    rebindAll(grouped, offsetScale, includeMap({'paddingInner': 'paddingOuter'}));\r\n\r\n    return grouped;\r\n};\r\n","import { scaleLinear } from 'd3-scale';\r\nimport { rebindAll, exclude } from '@d3fc/d3fc-rebind';\r\nimport groupedBase from '../groupedBase';\r\n\r\nexport default function(series) {\r\n\r\n    const base = groupedBase(series);\r\n\r\n    const grouped = (data) => {\r\n        data.forEach((seriesData, index) => {\r\n\r\n            // create a composite scale that applies the required offset\r\n            const isVertical = series.orient() !== 'horizontal';\r\n            const baseScale = isVertical ? base.xScale() : base.yScale();\r\n            const compositeScale = (d, i) => {\r\n                const offset = base.offsetScaleForDatum(data, d, i);\r\n                return baseScale(d) +\r\n                  offset(index) +\r\n                  offset.bandwidth() / 2;\r\n            };\r\n            rebindAll(compositeScale, baseScale, exclude('clamp', 'copy'));\r\n\r\n            if (isVertical) {\r\n                series.xScale(compositeScale);\r\n                series.yScale(base.yScale());\r\n            } else {\r\n                series.yScale(compositeScale);\r\n                series.xScale(base.xScale());\r\n            }\r\n\r\n            // if the sub-series has a bandwidth, set this from the offset scale\r\n            if (series.bandwidth) {\r\n                series.bandwidth(\r\n                  (d, i) => base.offsetScaleForDatum(data, d, i)\r\n                                .bandwidth()\r\n                );\r\n            }\r\n\r\n            // adapt the decorate function to give each series the correct index\r\n            series.decorate((c, d) => base.decorate()(c, d, index));\r\n            series(seriesData);\r\n        });\r\n    };\r\n\r\n    rebindAll(grouped, series, exclude('decorate', 'xScale', 'yScale'));\r\n    rebindAll(grouped, base, exclude('offsetScaleForDatum'));\r\n\r\n    return grouped;\r\n}\r\n"],"names":["xScale","yScale","base","chartCartesian","chart","selection","result","select","on","d","i","nodes","canvas","node","series","canvasPlotArea","context","getContext","rebindAll","gl","vsSource","fsSource","vertexShader","loadShader","VERTEX_SHADER","fragmentShader","FRAGMENT_SHADER","shaderProgram","createProgram","attachShader","linkProgram","getProgramParameter","LINK_STATUS","console","error","getProgramInfoLog","type","source","shader","createShader","shaderSource","compileShader","getShaderParameter","COMPILE_STATUS","getShaderInfoLog","deleteShader","glBuffer","createBuffer","buffer","array","bindBuffer","ARRAY_BUFFER","srcArray","constructor","Float32Array","bufferData","STATIC_DRAW","addr","numComponents","positionBuffer","lastColor","initShaders","vertexLocation","getAttribLocation","offsetLocation","getUniformLocation","scaleLocation","seriesColorLocation","draw","positions","color","mode","TRIANGLES","offset","count","fColor","some","c","setColor","vertexCount","length","drawArrays","activate","setupProgram","setModelView","scale","uniform2fv","useProgram","FLOAT","normalize","stride","vertexAttribPointer","enableVertexAttribArray","uniform4fv","baseShader","lastWidth","lastStrokeColor","edgeColorLocation","lineWidthLocation","lineWidth","strokeColor","sColor","POINTS","uniform1f","exclude","pointsBase","texture","createTexture","samplerLocation","image","setupTexture","activeTexture","TEXTURE0","bindTexture","TEXTURE_2D","texImage2D","RGBA","UNSIGNED_BYTE","isPowerOf2","width","height","generateMipmap","texParameteri","TEXTURE_WRAP_S","CLAMP_TO_EDGE","TEXTURE_WRAP_T","TEXTURE_MIN_FILTER","LINEAR","uniform1i","value","drawFunctions","raw","circles","pointTextures","PRIVATE","viewport","enable","BLEND","blendFunc","SRC_ALPHA","ONE_MINUS_SRC_ALPHA","drawModules","modelView","api","activated","Object","keys","forEach","key","applyScales","x","convertScale","y","scaleFactor","pixel","pixelSize","isLinear","domain","range","clamp","exponent","screenSize","invert","invertConst","asDate","Date","numDomain","map","valueOf","scaleFn","domainSize","screenDomainStart","screenDomain","Math","abs","screenRange","r","factor","defined","outerArguments","arguments","j","align","initialValues","env","assign","baseValue","crossValue","mainValue","bandwidth","orient","createBase","decorate","scaleIdentity","values","alignOffset","y0","origin","baseOrigin","transposedX","transposedY","functor","xyBase","cacheEnabled","glAPI","cached","glBase","data","helperAPI","helper","red","green","black","gray","darkGray","toGl","v","g","b","sqrt","opacity","bar","scales","fillStyle","colors","strokeStyle","fillColor","glColor","withLines","filteredData","filter","projected","getProjectedData","triangles","lines","LINES","cachedProjected","crossFn","mainFn","baseFn","vertical","triangleIndex","insertTriangle","x1","y1","x2","y2","x3","y3","lineIndex","insertLine","insertBar","x4","y4","xl","xr","x0","yu","yd","projectedData","line","parseInt","rawFloat32Data","batches","batch","points","LINE_STRIP","projectedTriangles","getProjectedTriangles","TRIANGLE_STRIP","getBatches","pushBatch","index","push","target","start","end","normal","getNormal","normalPixels","normaliseVector","vector","lineNormal","p1","p2","lastPoint","thisPoint","nextPoint","l1","l2","tangent","miter","normal1","area","dataPoints","crossoverCount","areaBatches","lineBatches","batchSet","pushBatches","lastPositive","p","positive","undefined","insertCrossovers","last","midx","midy","size","symbolCircle","imagePromise","point","then","sizeFn","getSymbolImage","img","Promise","resolve","complete","onload","textureSize","document","createElement","halfSize","translate","beginPath","symbol","closePath","fill","window","Image","src","toDataURL","offsetScale","scaleBand","grouped","scaleLinear","offsetScaleForDatum","halfWidth","includeMap","groupedBase","seriesData","isVertical","baseScale","compositeScale"],"mappings":"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"}